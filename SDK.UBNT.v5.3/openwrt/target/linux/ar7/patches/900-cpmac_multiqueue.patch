This patch fixes the network driver cpmac.c for compilation with
configuration option CONFIG_NETDEVICES_MULTIQUEUE.

These compiler warnings are fixed by the patch:
drivers/net/cpmac.c: In function 'cpmac_end_xmit':
drivers/net/cpmac.c:630: warning: passing argument 2 of 'netif_subqueue_stopped' makes pointer from integer without a cast
drivers/net/cpmac.c:641: warning: passing argument 2 of 'netif_subqueue_stopped' makes pointer from integer without a cast
drivers/net/cpmac.c: In function 'cpmac_probe':
drivers/net/cpmac.c:1128: warning: unused variable 'i'

During runtime, the unpatched driver raises a fatal runtime exception.
This is fixed by calling __netif_subqueue_stopped instead
of netif_subqueue_stopped, too.

Two additional code parts were modified for CONFIG_NETDEVICES_MULTIQUEUE
because other drivers do it in the same way.

        Signed-off-by: Stefan Weil <weil@mail.berlios.de>

--- a/drivers/net/cpmac.c
+++ b/drivers/net/cpmac.c
@@ -627,7 +627,7 @@ static void cpmac_end_xmit(struct net_de
 		dev_kfree_skb_irq(desc->skb);
 		desc->skb = NULL;
 #ifdef CONFIG_NETDEVICES_MULTIQUEUE
-		if (netif_subqueue_stopped(dev, queue))
+		if (__netif_subqueue_stopped(dev, queue))
 			netif_wake_subqueue(dev, queue);
 #else
 		if (netif_queue_stopped(dev))
@@ -638,7 +638,7 @@ static void cpmac_end_xmit(struct net_de
 			printk(KERN_WARNING
 			       "%s: end_xmit: spurious interrupt\n", dev->name);
 #ifdef CONFIG_NETDEVICES_MULTIQUEUE
-		if (netif_subqueue_stopped(dev, queue))
+		if (__netif_subqueue_stopped(dev, queue))
 			netif_wake_subqueue(dev, queue);
 #else
 		if (netif_queue_stopped(dev))
@@ -1124,7 +1124,7 @@ static int external_switch;
 
 static int __devinit cpmac_probe(struct platform_device *pdev)
 {
-	int rc, phy_id, i;
+	int rc, phy_id;
 	char *mdio_bus_id = "0";
 	struct resource *mem;
 	struct cpmac_priv *priv;
@@ -1152,7 +1152,11 @@ static int __devinit cpmac_probe(struct 
 		}
 	}
 
+#ifdef CONFIG_NETDEVICES_MULTIQUEUE
 	dev = alloc_etherdev_mq(sizeof(*priv), CPMAC_QUEUES);
+#else
+	dev = alloc_etherdev(sizeof(*priv));
+#endif
 
 	if (!dev) {
 		printk(KERN_ERR "cpmac: Unable to allocate net_device\n");
@@ -1179,7 +1183,9 @@ static int __devinit cpmac_probe(struct 
 	dev->set_multicast_list = cpmac_set_multicast_list;
 	dev->tx_timeout         = cpmac_tx_timeout;
 	dev->ethtool_ops        = &cpmac_ethtool_ops;
+#ifdef CONFIG_NETDEVICES_MULTIQUEUE
 	dev->features |= NETIF_F_MULTI_QUEUE;
+#endif
 
 	netif_napi_add(dev, &priv->napi, cpmac_poll, 64);
 
