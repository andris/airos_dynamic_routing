diff -Naupr a/drivers/net/Kconfig b/drivers/net/Kconfig
--- a/drivers/net/Kconfig	2009-10-15 03:46:40.000000000 -0700
+++ b/drivers/net/Kconfig	2010-09-10 15:05:58.625883472 -0700
@@ -2683,6 +2683,12 @@ config PPP
 	  here and read <file:Documentation/networking/net-modules.txt>.
 	  The module will be called ppp_generic.
 
+config PPP_PACKET_INFO
+	bool "PPP packet info in sk_buff"
+	depends on PPP
+	help
+	  If unsure, say N.
+
 config PPP_MULTILINK
 	bool "PPP multilink support (EXPERIMENTAL)"
 	depends on PPP && EXPERIMENTAL
diff -Naupr a/drivers/net/ppp_generic.c b/drivers/net/ppp_generic.c
--- a/drivers/net/ppp_generic.c	2010-09-07 11:14:02.795248428 -0700
+++ b/drivers/net/ppp_generic.c	2010-09-11 10:22:46.269811399 -0700
@@ -1050,6 +1050,9 @@ pad_compress_skb(struct ppp *ppp, struct
 				   new_skb->data, skb->len + 2,
 				   compressor_skb_size);
 	if (len > 0 && (ppp->flags & SC_CCP_UP)) {
+#ifdef CONFIG_PPP_PACKET_INFO
+		memcpy(&new_skb->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 		kfree_skb(skb);
 		skb = new_skb;
 		skb_put(skb, len);
@@ -1076,6 +1079,93 @@ pad_compress_skb(struct ppp *ppp, struct
 	return new_skb;
 }
 
+#ifdef CONFIG_PPP_PACKET_INFO
+
+#define _PPP_PROTO_HEADER_LEN	2
+/** Field offset positions for IP, UDP and TCP */
+
+#define _IP_BYTE_POSITION_VHL			0
+#define _IP_BYTE_POSITION_TOS			(_IP_BYTE_POSITION_VHL + 1)
+#define _IP_WORD_POSITION_TOTLEN		(_IP_BYTE_POSITION_TOS + 1)
+#define _IP_WORD_POSITION_ID			(_IP_WORD_POSITION_TOTLEN + 2)
+#define _IP_WORD_POSITION_FLAGSFRAG		(_IP_WORD_POSITION_ID + 2)
+#define _IP_BYTE_POSITION_TTL			(_IP_WORD_POSITION_FLAGSFRAG + 2)
+#define _IP_BYTE_POSITION_PROTOCOL		(_IP_BYTE_POSITION_TTL + 1)
+#define _IP_WORD_POSITION_CHKSUM		(_IP_BYTE_POSITION_PROTOCOL + 1)
+#define _IP_DWORD_POSITION_SRCADDR		(_IP_WORD_POSITION_CHKSUM + 2)
+#define _IP_DWORD_POSITION_DSTADDR		(_IP_DWORD_POSITION_SRCADDR + 4)
+#define _IP_POSITION_OPTIONS			(_IP_DWORD_POSITION_DSTADDR + 4)
+
+#define _IP_PROTO_UDP				17
+#define _IP_PROTO_TCP				6
+#define _IP_PROTO_ICMP				1
+
+#define	_UDP_WORD_POSITION_SRC_PORT	0
+#define	_UDP_WORD_POSITION_DST_PORT	(_UDP_WORD_POSITION_SRC_PORT + 2)
+#define	_UDP_WORD_POSITION_UDP_LENGTH	(_UDP_WORD_POSITION_DST_PORT + 2)
+#define	_UDP_WORD_POSITION_UDP_CHKSUM	(_UDP_WORD_POSITION_UDP_LENGTH + 2)
+#define _UDP_POSITION_DATA		(_UDP_WORD_POSITION_UDP_CHKSUM + 2)
+
+#define	_TCP_WORD_POSITION_SRC_PORT		0
+#define	_TCP_WORD_POSITION_DST_PORT		(_TCP_WORD_POSITION_SRC_PORT + 2)
+#define	_TCP_DWORD_POSITION_SEQ_NUMBER		(_TCP_WORD_POSITION_DST_PORT + 2)
+#define	_TCP_DWORD_POSITION_ACK_NUMBER		(_TCP_DWORD_POSITION_SEQ_NUMBER + 4)
+#define _TCP_DWORD_POSITION_DATA_OFFSET_FIELD	(_TCP_DWORD_POSITION_ACK_NUMBER + 4)
+
+#define _IP_HEADER_GET_LENGTH(version_header_len) (version_header_len & 0x0F)
+
+#define _ICMP_TYPE_ECHO_REPLY		0
+#define _ICMP_TYPE_ECHO_REQUEST		8
+
+#define _READ_BE16(_dest, _src) {\
+	__u16 __val;\
+	memcpy(&__val, (_src), sizeof(__u16));\
+	(_dest) = be16_to_cpu(__val);\
+}
+
+
+static void mark_ppp_packet_info(int proto, struct sk_buff *skb)
+{
+	struct skb_ppp_info* pppi;
+	__u8* data;
+
+	pppi = &skb->ppp_info;
+
+	pppi->magic	= SKB_PPP_INFO_MAGIC;
+	pppi->ts_ppp_in = jiffies;
+	pppi->ppp_proto	= proto;
+	
+	data = skb->data + _PPP_PROTO_HEADER_LEN;
+
+	if(pppi->ppp_proto == PPP_IP) {
+
+		int hdr_len;
+
+		hdr_len = _IP_HEADER_GET_LENGTH(data[_IP_BYTE_POSITION_VHL]);
+
+		pppi->ip_proto       = data[_IP_BYTE_POSITION_PROTOCOL];
+		pppi->ip_tos_diffsrv = data[_IP_BYTE_POSITION_TOS];
+
+		memcpy(pppi->ip_src_addr, &data[_IP_DWORD_POSITION_SRCADDR], 4);
+		memcpy(pppi->ip_dst_addr, &data[_IP_DWORD_POSITION_DSTADDR], 4);
+
+		data += (hdr_len << 2);
+		
+		if(pppi->ip_proto == _IP_PROTO_ICMP) {			
+			pppi->proto_data.icmp.type = data[0];
+		} else if(pppi->ip_proto == _IP_PROTO_TCP) {
+			_READ_BE16(pppi->proto_data.tcp.dst_port, &data[_TCP_WORD_POSITION_DST_PORT]);
+			_READ_BE16(pppi->proto_data.tcp.src_port, &data[_TCP_WORD_POSITION_SRC_PORT]);		
+		} else if(pppi->ip_proto == _IP_PROTO_UDP) {
+			_READ_BE16(pppi->proto_data.udp.dst_port, &data[_UDP_WORD_POSITION_DST_PORT]);
+			_READ_BE16(pppi->proto_data.udp.src_port, &data[_UDP_WORD_POSITION_SRC_PORT]);
+		}
+				
+	}	
+}
+
+#endif /* CONFIG_PPP_PACKET_INFO */
+
 /*
  * Compress and send a frame.
  * The caller should have locked the xmit path,
@@ -1089,6 +1179,10 @@ ppp_send_frame(struct ppp *ppp, struct s
 	int len;
 	unsigned char *cp;
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	mark_ppp_packet_info(proto, skb);
+#endif /* CONFIG_PPP_PACKET_INFO */
+
 	if (proto < 0x8000) {
 #ifdef CONFIG_PPP_FILTER
 		/* check if we should pass this packet */
@@ -1145,6 +1239,9 @@ ppp_send_frame(struct ppp *ppp, struct s
 				proto = PPP_VJC_UNCOMP;
 				cp[0] = skb->data[2];
 			}
+#ifdef CONFIG_PPP_PACKET_INFO
+			memcpy(&new_skb->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 			kfree_skb(skb);
 			skb = new_skb;
 			cp = skb_put(skb, len + 2);
diff -Naupr a/drivers/net/pppoe.c b/drivers/net/pppoe.c
--- a/drivers/net/pppoe.c	2009-10-15 03:46:40.000000000 -0700
+++ b/drivers/net/pppoe.c	2010-09-10 17:20:46.257576912 -0700
@@ -864,6 +864,10 @@ static int __pppoe_xmit(struct sock *sk,
 	if (!dev)
 		goto abort;
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	skb->ppp_info.ts_pppoe_in = jiffies;
+#endif
+
 	/* Copy the skb if there is no space for the header. */
 	if (headroom < (sizeof(struct pppoe_hdr) + dev->hard_header_len)) {
 		skb2 = dev_alloc_skb(32+skb->len +
@@ -872,7 +876,9 @@ static int __pppoe_xmit(struct sock *sk,
 
 		if (skb2 == NULL)
 			goto abort;
-
+#ifdef CONFIG_PPP_PACKET_INFO
+		memcpy(&skb2->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 		skb_reserve(skb2, dev->hard_header_len + sizeof(struct pppoe_hdr));
 		memcpy(skb_put(skb2, skb->len), skb->data, skb->len);
 	} else {
@@ -880,6 +886,9 @@ static int __pppoe_xmit(struct sock *sk,
 		 * give dev_queue_xmit something it can free.
 		 */
 		skb2 = skb_clone(skb, GFP_ATOMIC);
+#ifdef CONFIG_PPP_PACKET_INFO
+		memcpy(&skb2->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 	}
 
 	ph = (struct pppoe_hdr *) skb_push(skb2, sizeof(struct pppoe_hdr));
diff -Naupr a/include/linux/skbuff.h b/include/linux/skbuff.h
--- a/include/linux/skbuff.h	2009-10-15 03:46:58.000000000 -0700
+++ b/include/linux/skbuff.h	2010-09-11 10:17:13.842535848 -0700
@@ -169,6 +169,42 @@ enum {
 	SKB_FCLONE_CLONE,
 };
 
+#ifdef CONFIG_PPP_PACKET_INFO
+
+#define SKB_PPP_INFO_MAGIC 0xFFEEDDCC
+
+struct skb_ppp_info {
+
+	__u32	magic;
+	__u32	ppp_proto;
+
+	__u8	ip_proto;
+	__u8	ip_tos_diffsrv;
+	__u8	ip_dst_addr[4];
+	__u8	ip_src_addr[4];
+
+	unsigned long	ts_ppp_in;
+	unsigned long	ts_pppoe_in;
+
+	union {
+		struct {
+			__u8	type;
+		}icmp;
+
+		struct {
+			__u16	dst_port;
+			__u16	src_port;
+		}tcp;
+
+		struct {
+			__u16	dst_port;
+			__u16	src_port;
+		}udp;
+
+	}proto_data; 
+};
+#endif
+
 /** 
  *	struct sk_buff - socket buffer
  *	@next: Next buffer in list
@@ -254,6 +290,10 @@ struct sk_buff {
 	 */
 	char			cb[40];
 
+#ifdef CONFIG_PPP_PACKET_INFO
+	struct skb_ppp_info	ppp_info;
+#endif
+
 	unsigned int		len,
 				data_len,
 				mac_len,
diff -Naupr a/net/core/skbuff.c b/net/core/skbuff.c
--- a/net/core/skbuff.c	2009-10-15 03:47:00.000000000 -0700
+++ b/net/core/skbuff.c	2010-09-10 17:23:24.802676214 -0700
@@ -401,6 +401,9 @@ struct sk_buff *skb_clone(struct sk_buff
 	secpath_get(skb->sp);
 #endif
 	memcpy(n->cb, skb->cb, sizeof(skb->cb));
+#ifdef CONFIG_PPP_PACKET_INFO
+	memcpy(&n->ppp_info, &skb->ppp_info, sizeof(skb->ppp_info));
+#endif
 	C(len);
 	C(data_len);
 	C(csum);
