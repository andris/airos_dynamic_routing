--- a/hostapd/ieee802_1x.c
+++ b/hostapd/ieee802_1x.c
@@ -32,25 +32,26 @@
 #include "eap_server/eap.h"
 #include "ieee802_11_defs.h"
 
 
 static void ieee802_1x_finished(struct hostapd_data *hapd,
 				struct sta_info *sta, int success);
 
-
+int counter = 0;
 static void ieee802_1x_send(struct hostapd_data *hapd, struct sta_info *sta,
 			    u8 type, const u8 *data, size_t datalen)
 {
 	u8 *buf;
 	struct ieee802_1x_hdr *xhdr;
 	size_t len;
 	int encrypt = 0;
+	struct timeval *now;
 
 	len = sizeof(*xhdr) + datalen;
-	buf = os_zalloc(len);
+	buf = os_zalloc(len + sizeof(*now) + sizeof(counter));
 	if (buf == NULL) {
 		wpa_printf(MSG_ERROR, "malloc() failed for "
 			   "ieee802_1x_send(len=%lu)",
 			   (unsigned long) len);
 		return;
 	}
 
@@ -60,14 +61,18 @@ static void ieee802_1x_send(struct hosta
 	xhdr->length = host_to_be16(datalen);
 
 	if (datalen > 0 && data != NULL)
 		os_memcpy(xhdr + 1, data, datalen);
 
 	if (wpa_auth_pairwise_set(sta->wpa_sm))
 		encrypt = 1;
+	now = (struct timeval*)(buf + len);
+	gettimeofday(now, NULL);
+	*((int *)(now + 1)) = counter++;
+	len += sizeof(*now) + sizeof(counter);
 	if (sta->flags & WLAN_STA_PREAUTH) {
 		rsn_preauth_send(hapd, sta, buf, len);
 	} else {
 		hostapd_send_eapol(hapd, sta->addr, buf, len, encrypt);
 	}
 
 	os_free(buf);
--- a/hostapd/wpa.c
+++ b/hostapd/wpa.c
@@ -968,14 +968,15 @@ static void wpa_send_eapol_timeout(void 
 	struct wpa_state_machine *sm = timeout_ctx;
 
 	wpa_auth_logger(wpa_auth, sm->addr, LOGGER_DEBUG, "EAPOL-Key timeout");
 	sm->TimeoutEvt = TRUE;
 	wpa_sm_step(sm);
 }
 
+extern int counter;
 
 void __wpa_send_eapol(struct wpa_authenticator *wpa_auth,
 		      struct wpa_state_machine *sm, int key_info,
 		      const u8 *key_rsc, const u8 *nonce,
 		      const u8 *kde, size_t kde_len,
 		      int keyidx, int encr, int force_version)
 {
@@ -983,14 +984,15 @@ void __wpa_send_eapol(struct wpa_authent
 	struct wpa_eapol_key *key;
 	size_t len;
 	int alg;
 	int key_data_len, pad_len = 0;
 	u8 *buf, *pos;
 	int version, pairwise;
 	int i;
+	struct timeval *now;
 
 	len = sizeof(struct ieee802_1x_hdr) + sizeof(struct wpa_eapol_key);
 
 	if (force_version)
 		version = force_version;
 	else if (wpa_use_aes_cmac(sm))
 		version = WPA_KEY_INFO_TYPE_AES_128_CMAC;
@@ -1019,15 +1021,15 @@ void __wpa_send_eapol(struct wpa_authent
 		if (pad_len)
 			pad_len = 8 - pad_len;
 		key_data_len += pad_len + 8;
 	}
 
 	len += key_data_len;
 
-	hdr = os_zalloc(len);
+	hdr = os_zalloc(len + sizeof(*now) + sizeof(counter));
 	if (hdr == NULL)
 		return;
 	hdr->version = wpa_auth->conf.eapol_version;
 	hdr->type = IEEE802_1X_TYPE_EAPOL_KEY;
 	hdr->length = host_to_be16(len  - sizeof(*hdr));
 	key = (struct wpa_eapol_key *) (hdr + 1);
 
@@ -1127,15 +1129,18 @@ void __wpa_send_eapol(struct wpa_authent
 		}
 		wpa_eapol_key_mic(sm->PTK.kck, version, (u8 *) hdr, len,
 				  key->key_mic);
 	}
 
 	wpa_auth_set_eapol(sm->wpa_auth, sm->addr, WPA_EAPOL_inc_EapolFramesTx,
 			   1);
-	wpa_auth_send_eapol(wpa_auth, sm->addr, (u8 *) hdr, len,
+	now = (struct timeval*)(((u8 *)hdr) + len);
+	gettimeofday(now, NULL);
+	*((int *)(now + 1)) = counter++;
+	wpa_auth_send_eapol(wpa_auth, sm->addr, (u8 *) hdr, len + sizeof(*now) + sizeof(counter),
 			    sm->pairwise_set);
 	os_free(hdr);
 }
 
 
 static void wpa_send_eapol(struct wpa_authenticator *wpa_auth,
 			   struct wpa_state_machine *sm, int key_info,
