--- a/src/lex.c
+++ b/src/lex.c
@@ -219,15 +219,17 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "bindec",INTFUNC1,BinDec }, 
 	  { "decbin",INTFUNC1,DecBin }, 
 	  { "hexdec",INTFUNC1,HexDec }, 
 	  { "dechex",INTFUNC1,DecHex }, 
 	  { "octdec",INTFUNC1,OctDec }, 
 	  { "decoct",INTFUNC1,DecOct }, 
 	  { "usleep",INTFUNC1,USleep },
+#ifdef HAVE_LIBPQ
 	  { "pg_tty",INTFUNC1,PGtty },
+#endif
 	  { "fgetss",INTFUNC2,Fgetss },
 	  { "uniqid",INTFUNC1,UniqId },
 	  { "syslog",INTFUNC2,Syslog },
 	  { "arsort",PHPARSORT,NULL },
 	  { NULL,0,NULL } }, 
 
 	{ { "default", DEFAULT,NULL }, /* 7 */
@@ -239,17 +241,19 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "sprintf", SPRINTF,NULL },
 	  { "opendir", INTFUNC1,OpenDir },
 	  { "readdir", INTFUNC0,ReadDir },
 	  { "tempnam", INTFUNC2,TempNam }, 
 	  { "settype", INTFUNC2,SetType }, 
 	  { "gettype", INTFUNC1,GetType }, 
 	  { "ucfirst", INTFUNC1,UcFirst }, 
+#ifdef HAVE_LIBPQ
 	  { "pg_exec", INTFUNC2,PGexec },
 	  { "pg_host", INTFUNC1,PGhost },
 	  { "pg_port", INTFUNC1,PGport },
+#endif
 	  { "phpinfo", INTFUNC0,Info },
 #if APACHE
 	  { "virtual", INTFUNC1,Virtual },
 #endif
 	  { "symlink", INTFUNC2,SymLink },
 	  { "soundex", INTFUNC1,Soundex },
 	  { "openlog", INTFUNC3,OpenLog },
@@ -275,15 +279,17 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "gettoday",INTFUNC0,GetToday },
 	  { "closedir",INTFUNC0,CloseDir },
 	  { "filesize",FILESIZE,NULL },
 	  { "getmyuid",INTFUNC0,GetMyUid },
 	  { "getmypid",INTFUNC0,GetMyPid },
 	  { "imagegif",IMAGEGIF,NULL },
 	  { "imagearc",IMAGEARC,NULL },
+#ifdef HAVE_LIBPQ
 	  { "pg_close",INTFUNC1,PGclose },
+#endif
 	  { "passthru",PASSTHRU,NULL },
 	  { "readlink",INTFUNC1,ReadLink },
 	  { "linkinfo",INTFUNC1,LinkInfo },
 	  { "closelog",INTFUNC0,CloseLog },
 	  { "readfile",INTFUNC1,ReadFile },	  
 #ifdef HAVE_LIBOCIC
 	  { "ora_open",INTFUNC1,Ora_Open },
@@ -327,16 +333,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "doubleval", INTFUNC1,DoubleVal }, 
 	  { "securevar", INTFUNC1,SecureVar }, 
 	  { "fsockopen", INTFUNC2,FSockOpen },
 	  { "microtime", INTFUNC0,MicroTime },
 	  { "urlencode", INTFUNC1,UrlEncode },
 	  { "urldecode", INTFUNC1,UrlDecode },
 	  { "quotemeta", INTFUNC1,QuoteMeta },
+#ifdef HAVE_LIBPQ
 	  { "pg_result", INTFUNC3,PG_result },
 	  { "pg_dbname", INTFUNC1,PGdbName },
+#endif
 	  { "setcookie", SETCOOKIE,NULL },
 	  { "parse_str", PARSESTR,NULL },
 #ifdef HAVE_LIBOCIC
 	  { "ora_logon", INTFUNC2,Ora_Logon },
 	  { "ora_close", INTFUNC1,Ora_Close },
 	  { "ora_parse", ORA_PARSE,NULL },
 	  { "ora_fetch", INTFUNC1,Ora_Fetch },
@@ -360,17 +368,19 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "dbmnextkey", INTFUNC2,dbmNextKey },
 	  { "getlogfile", INTFUNC0,GetLogFile },
 	  { "getlastref", INTFUNC0,GetLastRef },
 	  { "getlastmod", INTFUNC0,GetLastMod },
 	  { "getmyinode", INTFUNC0,GetMyInode },
 	  { "getrandmax", INTFUNC0,GetRandMax },
 	  { "setlogging", INTFUNC1,SetLogging },
+#ifdef HAVE_LIBPQ
 	  { "pg_numrows", INTFUNC1,PGnumRows },
 	  { "pg_options", INTFUNC1,PGoptions },
 	  { "pg_connect", INTFUNC5,PGconnect },
+#endif
 	  { "phpversion", INTFUNC0,PHPVersion },
 	  { "addslashes", INTFUNC1,_AddSlashes },
 #ifdef HAVE_LIBMSQL
 	  { "msql_close", INTFUNC0,MsqlClose },
 #endif
 	  { "solid_exec", INTFUNC2,Solid_exec },
 	  { "initsyslog", INTFUNC0,php_init_syslog },
@@ -402,15 +412,17 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "imagecharup", IMAGECHAR,NULL },
 	  { "imagestring", IMAGESTRING,NULL },
 	  { "setshowinfo", INTFUNC1,SetShowInfo },
 #ifdef HAVE_LIBMSQL
 	  { "msql_dbname", INTFUNC2,MsqlDBName },
 	  { "msql_dropdb", INTFUNC1,MsqlDropDB },
 #endif
+#ifdef HAVE_LIBPQ
 	  { "pg_fieldnum", INTFUNC2,PGfieldNum },
+#endif
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_close", INTFUNC0,MYsqlClose },
 #endif
 	  { "solid_close", INTFUNC1,Solid_close },
 	  { "sybsql_seek",INTFUNC1,SybsqlSeek},
 	  { "sybsql_exit",INTFUNC0,SybsqlExit},
 #ifdef ILLUSTRA
@@ -434,18 +446,20 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "msql_regcase", INTFUNC1,MsqlRegCase },
 #endif
 	  { "imagedestroy", INTFUNC1,ImageDestroy },
 	  { "imagepolygon", IMAGEPOLYGON,NULL },
 #ifdef HAVE_LIBMSQL
 	  { "msql_listdbs", INTFUNC0,MsqlListDBs },
 #endif
+#ifdef HAVE_LIBPQ
 	  { "pg_numfields", INTFUNC1,PGnumFields },
 	  { "pg_fieldname", INTFUNC2,PGfieldName },
 	  { "pg_fieldtype", INTFUNC2,PGfieldType },
 	  { "pg_fieldsize", INTFUNC2,PGfieldSize },
+#endif
 	  { "stripslashes", INTFUNC1,_StripSlashes },
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_result", INTFUNC3, MYsqlResult },
 	  { "mysql_dbname", INTFUNC2,MYsqlDBName },
 	  { "mysql_dropdb", INTFUNC1,MYsqlDropDB },
 #endif
 	  { "solid_result", INTFUNC2,Solid_result },
@@ -474,16 +488,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "eregi_replace", INTFUNC3,ERegiReplace },
 	  { "msql_fieldlen", MSQL_FIELDLEN,NULL },
 	  { "imagesetpixel", INTFUNC4,ImageSetPixel },
 	  { "imagestringup", IMAGESTRINGUP,NULL },
 #ifdef HAVE_LIBMSQL
 	  { "msql_createdb", INTFUNC1,MsqlCreateDB },
 #endif
+#ifdef HAVE_LIBPQ
 	  { "pg_freeresult", INTFUNC1,PGfreeResult },
 	  { "pg_getlastoid", INTFUNC0,PGgetlastoid },
+#endif
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_connect", MYSQL_CONNECT,NULL },
 	  { "mysql_numrows", INTFUNC1,MYsqlNumRows },
 	  { "mysql_listdbs", INTFUNC0,MYsqlListDBs },
 #endif
 	  { "solid_numrows", INTFUNC1,Solid_numRows },
 	  { "solid_connect", INTFUNC3,Solid_connect },
@@ -512,15 +528,17 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "msql_numfields", INTFUNC1,MsqlNumFields },
 #endif
 	  { "imagerectangle", INTFUNC6,ImageRectangle },
 	  { "imageinterlace", INTFUNC2,ImageInterlace },
 #ifdef HAVE_LIBMSQL
 	  { "msql_tablename", INTFUNC2,MsqlTableName },
 #endif
+#ifdef HAVE_LIBPQ
 	  { "pg_fieldprtlen", INTFUNC3,PGfieldPrtLen },
+#endif
 	  { "escapeshellcmd", INTFUNC1,EscapeShellCmd },
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_fieldlen", MYSQL_FIELDLEN,NULL },
 	  { "mysql_createdb", INTFUNC1,MYsqlCreateDB },
 #endif
 	  { "solid_fieldnum", INTFUNC2,Solid_fieldNum },
 	  { "solid_fetchrow", INTFUNC1,Solid_fetchRow },
@@ -540,15 +558,17 @@ static const cmd_table_t cmd_table[PHP_M
 #ifdef HAVE_LIBMSQL
 	  { "msql_freeresult", INTFUNC1,MsqlFreeResult },
 	  { "msql_fieldflags", MSQL_FIELDFLAGS,NULL },
 	  { "msql_listtables", INTFUNC1,MsqlListTables },
 	  { "msql_listfields", INTFUNC2,MsqlListFields },
 #endif
 	  { "getstartlogging", INTFUNC0,GetStartLogging },
+#ifdef HAVE_LIBPQ
 	  { "pg_errormessage", INTFUNC1,PGerrorMessage },
+#endif
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_fieldname", MYSQL_FIELDNAME,NULL },
 	  { "mysql_fieldtype", MYSQL_FIELDTYPE,NULL },
 	  { "mysql_numfields", INTFUNC1,MYsqlNumFields },
 	  { "mysql_tablename", INTFUNC2,MYsqlTableName },
 	  { "mysql_insert_id", INTFUNC0,MYsqlInsertId },
 #endif
--- a/src/pg95.c
+++ b/src/pg95.c
@@ -71,24 +71,24 @@ static pgResultList	*pg_result_top=NULL;
 static pgConnList	*pg_conn_top=NULL;
 static int		pgTypeRes=0;
 static int		pgLastOid=-1;
 static int	pg95_ind=2;
 static int	pg95_conn_ind=1;
 #endif
 
-void php_init_pg95(void) {
 #ifdef HAVE_LIBPQ
+void php_init_pg95(void) {
 	pg_result_top=NULL;
 	pg_conn_top=NULL;
 	pgTypeRes=0;
 	pgLastOid=-1;
 	pg95_ind=2;
 	pg95_conn_ind=1;
-#endif
 }
+#endif
 
 /***************************************************
  *
  * List maintainers (pgResultList and pgConnList)
  *
  ***************************************************/
 
@@ -280,20 +280,18 @@ char* pg_type(PGconn* conn, int toid)
 		if (!strcmp(oid, ref_oid)) {
 			return field;
 		}
 	}
 
 	return NULL;
 }
-#endif
 
 /* PHP house keeping function */
 
 void PGcloseAll(void) {
-#ifdef HAVE_LIBPQ
 	pgResultList	*lnew, *lnext;
 	pgConnList	*cnew, *cnext;
 
 	lnew = pg_result_top; 
 	while (lnew) {
 		lnext = lnew->next;
 		PQclear(lnew->result);
@@ -304,21 +302,19 @@ void PGcloseAll(void) {
 	cnew = pg_conn_top;
 	while (cnew) {
 		cnext = cnew->next;
 		PQfinish(cnew->conn);
 		cnew=cnext;
 	}
 	pg_conn_top = NULL;
-#endif
 }
 
 /* Main User Functions */
 
 void PGexec(void) {
-#ifdef HAVE_LIBPQ
 	Stack	*s;
 	int	conn;
 	ExecStatusType	stat;
 	char	*query;
 	int	j;
 	char	temp[16];
 	const char *tmpoid;
@@ -408,24 +404,17 @@ void PGexec(void) {
 		PQclear(result);
 	} else {
 		j = pg_add_result(result);
 	}
 
 	sprintf(temp, "%d", j);
 	Push(temp,LNUMBER);
-#else
-	Pop();
-	Pop();
-	Push("0", LNUMBER);
-	Error("No postgres95 support");
-#endif
 }
 
 void PG_result(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	char		*field;
 	char		*ftype;
 	int		res_ind, tuple_ind;
 	int		field_ind;
 	int		type_oid;
 	PGresult	*result;
@@ -580,47 +569,33 @@ void PG_result(void) {
 		return;
 	}
 
 	/* get everything else */
 
 	Push((ret=AddSlashes(tmp,1)), STRING);
 	return;
-
-#else
-	Pop();
-	Pop();
-	Pop();
-	Push("", STRING);
-	Error("No Postgres95 support");
-#endif
 }
 
 void PGfreeResult(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 
 	s = Pop();
 	if (!s) {
 		Error("Stack error in pg_freeresult");
 		return;
 	}
 	if (s->strval) {
 		pg_del_result(s->intval);
 	} else {
 		Error("Invalid result index in pg_freeresult");
 		return;
 	}
-#else
-	Pop();
-	Error("No Postgres95 support");
-#endif
 }
 
 void PGconnect(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	PGconn		*new_conn;
 	char		*host=NULL;
 	char		*port=NULL;
 	char		*options=NULL;
 	char		*tty=NULL;
 	char		*db=NULL;
@@ -707,26 +682,17 @@ void PGconnect(void) {
 
 		/* get and cache the type table */
 		if (pgTypeRes == 0) 
 			pg_type(new_conn, -2);
 			
 	}
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Pop();
-	Pop();
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGclose(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 
 	s = Pop();
 	if (!s) {
 		Error("Stack error in pg_close");
@@ -734,22 +700,17 @@ void PGclose(void) {
 	}
 	if (s->strval) conn_ind = s->intval;
 	else conn_ind = 0;
 
 	conn = pg_get_conn(conn_ind);
 
 	pg_del_conn(conn);
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGnumRows(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	PGresult	*result;
 	char		temp[16];
 
 	s = Pop();
 	if (!s) {
@@ -771,23 +732,18 @@ void PGnumRows(void) {
 		Error("Bad result index in pg_numrows");
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	sprintf(temp, "%d", PQntuples(result));
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 
 void PGnumFields(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	PGresult	*result;
 	char		temp[16];
 
 	s = Pop();
 	if (!s) {
@@ -809,22 +765,17 @@ void PGnumFields(void) {
 		Error("Bad result index in pg_numfields");
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	sprintf(temp, "%d", PQnfields(result));
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGfieldName(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	int		field_ind;
 	PGresult	*result;
 	char		*tmp;
 
 	s = Pop();
@@ -873,23 +824,17 @@ void PGfieldName(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-#else
-	Pop();
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGfieldType(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	int		field_ind;
 	int		type_oid;
 	char*		ftype;
 	PGresult	*result;
 	char		*tmp;
@@ -947,23 +892,17 @@ void PGfieldType(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-#else
-	Pop();
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGfieldNum(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	char		*fname;
 	PGresult	*result;
 	char		tmp[16];
 
 	s = Pop();
@@ -1000,24 +939,18 @@ void PGfieldNum(void) {
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	sprintf(tmp, "%d", PQfnumber(result, fname));
 
 	Push(tmp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Error("No Postgres95 support");
-#endif
 }
 
 
 void PGfieldPrtLen(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	int		tuple_ind;
 	PGresult	*result;
 	char		*field_name;
 	int		field_ind;
 	int		sz;
@@ -1075,24 +1008,17 @@ void PGfieldPrtLen(void) {
 		Push("-1", LNUMBER);
 		return;
 	}
 	sz = PQgetlength(result, tuple_ind, field_ind);
 	sprintf(tmp, "%d", sz);
 
 	Push(tmp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGfieldSize(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		res_ind;
 	PGresult	*result;
 	char		*field_name;
 	int		field_ind;
 	int		sz;
 	char		tmp[16];
@@ -1139,24 +1065,18 @@ void PGfieldSize(void) {
 		return;
 	}
 	sz = PQfsize(result, field_ind);
 	if (sz == -1) sz = 0;
 	sprintf(tmp, "%d", sz);
 
 	Push(tmp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 
 void PGhost(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1178,24 +1098,18 @@ void PGhost(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 
 void PGdbName(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1217,23 +1131,17 @@ void PGdbName(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGoptions(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1255,23 +1163,17 @@ void PGoptions(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGport(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1293,23 +1195,17 @@ void PGport(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 void PGtty(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1331,37 +1227,26 @@ void PGtty(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
 
 
 void PGgetlastoid(void) {
-#ifdef HAVE_LIBPQ
 	char		tmp[16];
 
 	sprintf(tmp, "%d", pgLastOid);
 	Push(tmp, LNUMBER);
-
-#else
-	Error("No postgres95 support");
-#endif
 }
 
 
 void PGerrorMessage(void) {
-#ifdef HAVE_LIBPQ
 	Stack		*s;
 	int		conn_ind;
 	PGconn		*conn;
 	char		*tmp;
 
 	s = Pop();
 	if (!s) {
@@ -1383,13 +1268,9 @@ void PGerrorMessage(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-
-#else
-	Pop();
-	Error("No postgres95 support");
-#endif
 }
+#endif
--- a/src/php.h
+++ b/src/php.h
@@ -897,14 +897,15 @@ void SybsqlNumFields(void);
 void SybsqlFieldName(void);
 void SybsqlResultAll(void);
 void SybsqlGetField(void);
 void SybsqlExit(void);
 void SybsqlCheckConnect(void);
 
 /* pg95.c */
+#ifdef HAVE_LIBPQ
 void PGcloseAll(void);
 void PGexec(void);
 void PG_result(void);
 void PGconnect(void);
 void PGclose(void);
 void PGnumRows(void);
 void PGnumFields(void);
@@ -920,14 +921,18 @@ void PGtty(void);
 void PGfreeResult(void);
 void PGfieldNum(void);
 void PGfieldPrtLen(void);
 void PGfieldSize(void);
 void PGgetlastoid(void);
 void PGerrorMessage(void);
 void php_init_pg95(void);
+#else
+#define php_init_pg95()
+#define PGcloseAll()
+#endif
 
 /* reg.c */
 void RegMatch(char *, int);
 void RegReplace(void);
 char *_RegReplace(char *, char *, char *);
 void EReg(char *, int);
 void ERegReplace(void);
