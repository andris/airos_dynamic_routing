--- a/src/lex.c
+++ b/src/lex.c
@@ -378,15 +378,17 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "pg_connect", INTFUNC5,PGconnect },
 #endif
 	  { "phpversion", INTFUNC0,PHPVersion },
 	  { "addslashes", INTFUNC1,_AddSlashes },
 #ifdef HAVE_LIBMSQL
 	  { "msql_close", INTFUNC0,MsqlClose },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_exec", INTFUNC2,Solid_exec },
+#endif
 	  { "initsyslog", INTFUNC0,php_init_syslog },
 #ifdef HAVE_LIBOCIC
 	  { "ora_logoff", INTFUNC1,Ora_Logoff },
 	  { "ora_commit", INTFUNC1,Ora_Commit },
 #endif
 #ifdef ILLUSTRA
 	  { "mi_connect", INTFUNC3,MIconnect },
@@ -418,15 +420,17 @@ static const cmd_table_t cmd_table[PHP_M
 #endif
 #ifdef HAVE_LIBPQ
 	  { "pg_fieldnum", INTFUNC2,PGfieldNum },
 #endif
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_close", INTFUNC0,MYsqlClose },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_close", INTFUNC1,Solid_close },
+#endif
 	  { "sybsql_seek",INTFUNC1,SybsqlSeek},
 	  { "sybsql_exit",INTFUNC0,SybsqlExit},
 #ifdef ILLUSTRA
 	  { "mi_fieldnum", INTFUNC3,MIfieldNum },
 #endif
 	  { "phpshowpool",INTFUNC0,ShowPool },
 #if HAVE_LIBADABAS
@@ -458,15 +462,17 @@ static const cmd_table_t cmd_table[PHP_M
 #endif
 	  { "stripslashes", INTFUNC1,_StripSlashes },
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_result", INTFUNC3, MYsqlResult },
 	  { "mysql_dbname", INTFUNC2,MYsqlDBName },
 	  { "mysql_dropdb", INTFUNC1,MYsqlDropDB },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_result", INTFUNC2,Solid_result },
+#endif
 	  { "sybsql_dbuse", INTFUNC1,SybsqlDbuse },
 	  { "sybsql_query", INTFUNC1,SybsqlQuery },
 	  { "sybsql_isrow", INTFUNC0,SybsqlIsRow }, 
 	  { "getimagesize", INTFUNC1,GetImageSize },
 #ifdef HAVE_LIBOCIC
 	  { "ora_commiton", INTFUNC1,Ora_CommitOn },
 	  { "ora_rollback", INTFUNC1,Ora_Rollback },
@@ -497,16 +503,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "pg_getlastoid", INTFUNC0,PGgetlastoid },
 #endif
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_connect", MYSQL_CONNECT,NULL },
 	  { "mysql_numrows", INTFUNC1,MYsqlNumRows },
 	  { "mysql_listdbs", INTFUNC0,MYsqlListDBs },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_numrows", INTFUNC1,Solid_numRows },
 	  { "solid_connect", INTFUNC3,Solid_connect },
+#endif
 	  { "sybsql_result", INTFUNC1,SybsqlResult}, 
 #ifdef HAVE_LIBOCIC
 	  { "ora_commitoff", INTFUNC1,Ora_CommitOff },
 	  { "ora_getcolumn", INTFUNC2,Ora_GetColumn },
 #endif
 	  { "getallheaders", INTFUNC0,GetAllHeaders },
 #if HAVE_LIBADABAS
@@ -536,16 +544,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "pg_fieldprtlen", INTFUNC3,PGfieldPrtLen },
 #endif
 	  { "escapeshellcmd", INTFUNC1,EscapeShellCmd },
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_fieldlen", MYSQL_FIELDLEN,NULL },
 	  { "mysql_createdb", INTFUNC1,MYsqlCreateDB },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_fieldnum", INTFUNC2,Solid_fieldNum },
 	  { "solid_fetchrow", INTFUNC1,Solid_fetchRow },
+#endif
 #ifdef HAVE_LIBMSQL
 	  { "msql_listindex", INTFUNC3,MsqlListIndex },
 #endif
 	  { "sybsql_connect", INTFUNC0,SybsqlConnect }, 
 	  { "sybsql_nextrow", INTFUNC0,SybsqlNextRow },
 	  { "sybsql_numrows", INTFUNC0,SybsqlNumRows},
 	  { "clearstatcache", INTFUNC0,ClearStatCache},
@@ -568,28 +578,32 @@ static const cmd_table_t cmd_table[PHP_M
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_fieldname", MYSQL_FIELDNAME,NULL },
 	  { "mysql_fieldtype", MYSQL_FIELDTYPE,NULL },
 	  { "mysql_numfields", INTFUNC1,MYsqlNumFields },
 	  { "mysql_tablename", INTFUNC2,MYsqlTableName },
 	  { "mysql_insert_id", INTFUNC0,MYsqlInsertId },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_numfields", INTFUNC1,Solid_numFields },
 	  { "solid_fieldname", INTFUNC2,Solid_fieldName },
+#endif
 	  { "sybsql_getfield", INTFUNC1,SybsqlGetField},
 	  { NULL,0,NULL } },
 
 	{ { "htmlspecialchars", INTFUNC1,HtmlSpecialChars }, /* 16 */
 	  { "imagecopyresized", IMAGECOPYRESIZED,NULL },
 #ifdef HAVE_LIBMYSQL
 	  { "mysql_freeresult", INTFUNC1,MYsqlFreeResult },
 	  { "mysql_fieldflags", MYSQL_FIELDFLAGS,NULL },
 	  { "mysql_listtables", INTFUNC1,MYsqlListTables },
 	  { "mysql_listfields", INTFUNC2,MYsqlListFields },
 #endif
+#ifdef HAVE_LIBSOLID
 	  { "solid_freeresult", INTFUNC1,Solid_freeResult },
+#endif
 	  { "sybsql_numfields", INTFUNC0,SybsqlNumFields},
 	  { "sybsql_fieldname", INTFUNC1,SybsqlFieldName},
 #if HAVE_FILEPRO
 	  { "filepro_rowcount", INTFUNC0,filePro_rowcount},
 	  { "filepro_retrieve", INTFUNC2,filePro_retrieve},
 #endif
 	  { NULL,0,NULL } }, /* 16 */
--- a/src/php.h
+++ b/src/php.h
@@ -1275,26 +1275,31 @@ void php_init_adabas(char *,char *,char 
 #define Ada_fetchRow(a)
 #define Ada_resultAll(a)
 #define Ada_Field(a)
 #define Ada_closeAll()
 #endif
 
 /* solid.c */
+#ifdef HAVE_LIBSOLID
 void Solid_exec(void);
 void Solid_close(void);
 void Solid_result(void);
 void Solid_numRows(void);
 void Solid_connect(void);
 void Solid_fieldNum(void);
 void Solid_fetchRow(void);
 void Solid_numFields(void);
 void Solid_fieldName(void);
 void Solid_freeResult(void);
 void Solid_closeAll(void);
 void php_init_solid(void);
+#else
+#define php_init_solid()
+#define Solid_closeAll()
+#endif
 
 /* mail.c */
 void Mail(int);
 
 /* md5.c */
 void Md5(void);
 
--- a/src/solid.c
+++ b/src/solid.c
@@ -77,23 +77,23 @@ typedef struct SolidConnList {
 static SolidResultList *solid_result_top=NULL;
 static SolidConnList *solid_conn_top=NULL;
 static int solid_ind=1;
 static int solid_conn_ind=1;
 static HENV henv;
 #endif
 
-void php_init_solid(void) {
 #ifdef HAVE_LIBSOLID
+void php_init_solid(void) {
 	solid_result_top=NULL;
 	solid_conn_top=NULL;
 	solid_ind=2;
 	solid_conn_ind=1;
 	SQLAllocEnv(&henv);
-#endif
 }
+#endif
 
 /***************************************************
  *
  * List maintainers (SolidResultList and SolidConnList)
  *
  ***************************************************/
 
@@ -216,18 +216,19 @@ void solid_del_conn(HDBC conn) {
 		}
 		prev = new;
 		new = next;
 	}
 }
 #endif /* HAVE_LIBSOLID */
 
+#ifdef HAVE_LIBSOLID
+
 /* PHP house keeping function */
 
 void Solid_closeAll(void) {
-#ifdef HAVE_LIBSOLID
 	SolidResultList *lnew, *lnext;
 	SolidConnList   *cnew, *cnext;
 
 	lnew = solid_result_top; 
 	while (lnew) {
 		lnext = lnew->next;
 		SQLFreeStmt(lnew->result->stmt, SQL_DROP);
@@ -241,21 +242,19 @@ void Solid_closeAll(void) {
 		if(cnew->conn) {
 			SQLDisconnect(cnew->conn);
 			SQLFreeConnect(cnew->conn);
 		}
 		cnew=cnext;
 	}
 	solid_conn_top = NULL;
-#endif
 }
 
 /* Main User Functions */
 
 void Solid_exec(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         conn;
 	char        *query;
 	int         i, j;
 	char        temp[16];
 	SolidResult *result=NULL;
 	HDBC        curr_conn=NULL;
@@ -345,24 +344,17 @@ void Solid_exec(void) {
 			}
 		    j = solid_add_result(result,conn);
 		}
 	}
 
 	sprintf(temp, "%d", j);
 	Push(temp,LNUMBER);
-#else
-	Pop();
-	Pop();
-	Push("0", LNUMBER);
-	Error("No Solid support");
-#endif
 }
 
 void Solid_fetchRow(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         res_ind;
 	SolidResult *result;
 	RETCODE     rc;
 
 	s = Pop();
 	if (!s) {
@@ -393,24 +385,17 @@ void Solid_fetchRow(void) {
 	if (rc != SQL_SUCCESS && rc != SQL_SUCCESS_WITH_INFO) {
 		Push("0", LNUMBER);
 		return;
 	}
 	result->fetched++;
 	Push("1", LNUMBER);
 	return;
-
-#else
-	Pop();
-	Push("", STRING);
-	Error("No Solid support");
-#endif
 }
 
 void Solid_result(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	char        *field;
 	int         res_ind;
 	int         field_ind;
 	SolidResult *result;
 	int         i;
 	RETCODE     rc;
@@ -536,47 +521,34 @@ void Solid_result(void) {
 				} else
 					Push(AddSlashes(realval, 0), STRING);
                        } else
                                Push("", STRING);
 		}
 	}
 	return;
-
-#else
-	Pop();
-	Pop();
-	Push("", STRING);
-	Error("No Solid support");
-#endif
 }
 
 void Solid_freeResult(void) {
-#ifdef HAVE_LIBSOLID
 	Stack        *s;
 
 	s = Pop();
 	if (!s) {
 		Error("Stack error in solid_freeresult");
 		return;
 	}
 	if (s->strval) {
 		solid_del_result(s->intval);
 	} 
 	else {
 		Error("Invalid result index in solid_freeresult");
 		return;
 	}
-#else
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 void Solid_connect(void) {
-#ifdef HAVE_LIBSOLID
 	Stack   *s;
 	HDBC    new_conn;
 	char    *db=NULL;
 	char    *uid=NULL;
 	char    *pwd=NULL;
 	char    *temp;
 	int     j;
@@ -638,24 +610,17 @@ void Solid_connect(void) {
 	}
 	else {
 		j = solid_add_conn(new_conn);
 		temp = (char*) emalloc(1,11);
 		sprintf(temp, "%d", j);
 	}
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 void Solid_close(void) {
-#ifdef HAVE_LIBSOLID
 	Stack *s;
 	int   conn_ind;
 	HDBC  conn;
 	SolidResultList *lnew, *lnext;
 
 	s = Pop();
 	if (!s) {
@@ -681,22 +646,17 @@ void Solid_close(void) {
 		while(lnew) {
 			lnext = lnew->next;
 			if(lnew->conn_index == conn_ind) solid_del_result(lnew->index);
 			lnew = lnext;
 		}
 		solid_del_conn(conn);
 	}
-#else
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 void Solid_numRows(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         res_ind;
 	SolidResult *result;
 	SDWORD      rows;
 	char        temp[16];
 
 	s = Pop();
@@ -722,23 +682,18 @@ void Solid_numRows(void) {
 		return;
 	}
 
     /*SQLNumResultCols(result->stmt, &cols);*/
 	SQLRowCount(result->stmt, &rows);
 	sprintf(temp, "%ld", rows);
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 
 void Solid_numFields(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         res_ind;
 	SolidResult *result;
 	char        temp[16];
 
 	s = Pop();
 	if (!s) {
@@ -761,22 +716,17 @@ void Solid_numFields(void) {
 		Error("Bad result index in solid_numfields");
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	sprintf(temp, "%d", result->numcols);
 	Push(temp, LNUMBER);
-#else
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 void Solid_fieldName(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         res_ind;
 	int         field_ind;
 	SolidResult *result;
 	char        *tmp;
 
 	s = Pop();
@@ -826,23 +776,17 @@ void Solid_fieldName(void) {
 	if (tmp == NULL) {
 		Error("Out of memory");
 		Push("", STRING);
 		return;
 	}
 
 	Push(tmp, STRING);
-#else
-	Pop();
-	Pop();
-	Error("No Solid support");
-#endif
 }
 
 void Solid_fieldNum(void) {
-#ifdef HAVE_LIBSOLID
 	Stack       *s;
 	int         res_ind;
 	int         field_ind;
 	char        *fname;
 	SolidResult *result;
 	char        tmp[16];
 	int         i;
@@ -887,15 +831,9 @@ void Solid_fieldNum(void) {
 	field_ind = -1;
 	for (i=0; i<result->numcols; i++) {
 		if (strcasecmp(result->values[i].name, fname)==0)
 			field_ind = i;
 	}
 	sprintf(tmp, "%d", field_ind);
 	Push(tmp, LNUMBER);
-#else
-	Pop();
-	Pop();
-	Error("No Solid support");
-#endif
 }
-
-
+#endif
