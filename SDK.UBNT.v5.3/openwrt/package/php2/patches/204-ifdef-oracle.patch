--- a/src/lex.c
+++ b/src/lex.c
@@ -281,17 +281,19 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "imagearc",IMAGEARC,NULL },
 	  { "pg_close",INTFUNC1,PGclose },
 	  { "passthru",PASSTHRU,NULL },
 	  { "readlink",INTFUNC1,ReadLink },
 	  { "linkinfo",INTFUNC1,LinkInfo },
 	  { "closelog",INTFUNC0,CloseLog },
 	  { "readfile",INTFUNC1,ReadFile },	  
+#ifdef HAVE_LIBOCIC
 	  { "ora_open",INTFUNC1,Ora_Open },
 	  { "ora_exec",INTFUNC1,Ora_Exec },
 	  { "ora_bind",INTFUNC4,Ora_Bind },
+#endif
 #if PHP_SNMP_SUPPORT
 	  { "snmpwalk", INTFUNC3,phpsnmpwalk },
 #endif
 	  { "filetype", FILETYPE,NULL },
 #ifdef ILLUSTRA
 	  { "mi_close",INTFUNC1,MIclose },
 #endif
@@ -329,18 +331,20 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "urlencode", INTFUNC1,UrlEncode },
 	  { "urldecode", INTFUNC1,UrlDecode },
 	  { "quotemeta", INTFUNC1,QuoteMeta },
 	  { "pg_result", INTFUNC3,PG_result },
 	  { "pg_dbname", INTFUNC1,PGdbName },
 	  { "setcookie", SETCOOKIE,NULL },
 	  { "parse_str", PARSESTR,NULL },
+#ifdef HAVE_LIBOCIC
 	  { "ora_logon", INTFUNC2,Ora_Logon },
 	  { "ora_close", INTFUNC1,Ora_Close },
 	  { "ora_parse", ORA_PARSE,NULL },
 	  { "ora_fetch", INTFUNC1,Ora_Fetch },
+#endif
 	  { "checkdate", INTFUNC3,CheckDate },
 #ifdef ILLUSTRA
 	  { "mi_result", INTFUNC4,MIresult },
 	  { "mi_dbname", INTFUNC1,MIdbname },
 #endif
 	  { "fpassthru", INTFUNC1,FPassThru },
 #if HAVE_LIBADABAS
@@ -366,16 +370,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "phpversion", INTFUNC0,PHPVersion },
 	  { "addslashes", INTFUNC1,_AddSlashes },
 #ifdef HAVE_LIBMSQL
 	  { "msql_close", INTFUNC0,MsqlClose },
 #endif
 	  { "solid_exec", INTFUNC2,Solid_exec },
 	  { "initsyslog", INTFUNC0,php_init_syslog },
+#ifdef HAVE_LIBOCIC
 	  { "ora_logoff", INTFUNC1,Ora_Logoff },
 	  { "ora_commit", INTFUNC1,Ora_Commit },
+#endif
 #ifdef ILLUSTRA
 	  { "mi_connect", INTFUNC3,MIconnect },
 	  { "mi_numrows", INTFUNC2,MInumRows },
 #endif
 #if HAVE_LIBADABAS
 	  { "ada_result", INTFUNC2,Ada_result },
 #endif
@@ -443,16 +449,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "mysql_dropdb", INTFUNC1,MYsqlDropDB },
 #endif
 	  { "solid_result", INTFUNC2,Solid_result },
 	  { "sybsql_dbuse", INTFUNC1,SybsqlDbuse },
 	  { "sybsql_query", INTFUNC1,SybsqlQuery },
 	  { "sybsql_isrow", INTFUNC0,SybsqlIsRow }, 
 	  { "getimagesize", INTFUNC1,GetImageSize },
+#ifdef HAVE_LIBOCIC
 	  { "ora_commiton", INTFUNC1,Ora_CommitOn },
 	  { "ora_rollback", INTFUNC1,Ora_Rollback },
+#endif
 #ifdef ILLUSTRA
 	  { "mi_fieldname", INTFUNC3,MIfieldName },
 	  { "mi_numfields", INTFUNC2,MInumFields },
 #endif
 #if HAVE_LIBADABAS
 	  { "ada_fieldnum", INTFUNC2,Ada_fieldNum },
 	  { "ada_fetchrow", ADA_FETCHROW,NULL },
@@ -476,16 +484,18 @@ static const cmd_table_t cmd_table[PHP_M
 	  { "mysql_connect", MYSQL_CONNECT,NULL },
 	  { "mysql_numrows", INTFUNC1,MYsqlNumRows },
 	  { "mysql_listdbs", INTFUNC0,MYsqlListDBs },
 #endif
 	  { "solid_numrows", INTFUNC1,Solid_numRows },
 	  { "solid_connect", INTFUNC3,Solid_connect },
 	  { "sybsql_result", INTFUNC1,SybsqlResult}, 
+#ifdef HAVE_LIBOCIC
 	  { "ora_commitoff", INTFUNC1,Ora_CommitOff },
 	  { "ora_getcolumn", INTFUNC2,Ora_GetColumn },
+#endif
 	  { "getallheaders", INTFUNC0,GetAllHeaders },
 #if HAVE_LIBADABAS
 	  { "ada_numfields", INTFUNC1,Ada_numFields },
 	  { "ada_fieldname", ADA_FIELDNAME,NULL },
 	  { "ada_fieldtype", ADA_FIELDTYPE,NULL },
 	  { "ada_resultall", ADA_RESULTALL,NULL },
 #endif
--- a/src/oracle.c
+++ b/src/oracle.c
@@ -99,18 +99,19 @@ static oraCursor ora_cursor_array[MAX_CU
 
 #endif
 
 /*
 ** PHP functions
 */
 
+#if HAVE_LIBOCIC
+
 void
 Ora_Logon() /* userid, password */
 {
-#if HAVE_LIBOCIC
 	char userid[ORAUIDLEN+1], password[ORAPWLEN+1], sid[ORASIDLEN+1];
 	char retval[16];
 	oraConnection *conn;
 	char *envsid;
 	Stack *s;
 	
 #ifdef TRACE
@@ -176,31 +177,23 @@ Ora_Logon() /* userid, password */
 
 	conn->inuse = 1;
 	conn->waserror = 0;
 
 	sprintf(retval, "%d", conn->ind);
 	Push(retval, LNUMBER);
 
-#else
-	Pop();
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
-
 #ifdef TRACE
 	Error("Ora_Logon returns");
 #endif
 }
 
 
 void
 Ora_Logoff() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	int conn_ind;
 	oraConnection *conn;
 	Stack *s;
 
 #ifdef TRACE
 	Error("Ora_Logoff");
 #endif
@@ -236,30 +229,23 @@ Ora_Logoff() /* conn_index */
 		Push("-1", LNUMBER);
 		Error("Ora_Logoff had an error on connection %d.", conn_ind);
 	}
 	else {
 		Push("0", LNUMBER);
 	}
 
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
-
 #ifdef TRACE
 	Error("Ora_Logoff end");
 #endif
 }
 
 
 void
 Ora_Open() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraConnection *conn;
 	oraCursor *cursor;
 	int conn_ind;
 	char retval[16];
 
 #ifdef TRACE
@@ -296,30 +282,24 @@ Ora_Open() /* conn_index */
 		return;
 	}
 
 	cursor->conn_ind = conn_ind;
 
 	sprintf(retval, "%d", cursor->ind);
 	Push(retval, LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 
 #ifdef TRACE
 	Error("Ora_Open end");
 #endif
 }
 
 
 void
 Ora_Close() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraCursor *cursor;
 	int cursor_ind;
 
 #ifdef TRACE
 	Error("Ora_Close");
 #endif
@@ -345,29 +325,22 @@ Ora_Close() /* conn_index */
 		Error("Unable to close cursor (%s)", ora_error(&cursor->cda));
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	ora_del_cursor(cursor->ind);
 	Push("0", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_Close end");
 #endif
 }
 
-
 void
 Ora_CommitOff() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraConnection *conn;
 	int conn_ind;
 
 #ifdef TRACE
 	Error("Ora_CommitOff");
 #endif
@@ -390,29 +363,23 @@ Ora_CommitOff() /* conn_index */
 		Error("Unable to turn off auto-commit on connection %d (%s)",
 			  conn_ind, ora_error(&conn->lda));
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	Push("0", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_CommitOff end");
 #endif
 }
 
 
 void
 Ora_CommitOn() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraConnection *conn;
 	int conn_ind;
 
 #ifdef TRACE
 	Error("Ora_CommitOn");
 #endif
@@ -436,30 +403,24 @@ Ora_CommitOn() /* conn_index */
 		Error("Unable to turn on auto-commit on connection %d (%s)",
 			  conn_ind, ora_error(&conn->lda));
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	Push("0", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_CommitOn end");
 #endif
 
 }
 
 
 void
 Ora_Commit() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraConnection *conn;
 	int conn_ind;
 
 #ifdef TRACE
 	Error("Ora_Commit");
 #endif
@@ -485,29 +446,23 @@ Ora_Commit() /* conn_index */
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	conn->waserror = 0;
 
 	Push("0", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_Commit end");
 #endif
 }
 
 
 void
 Ora_Rollback() /* conn_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraConnection *conn;
 	int conn_ind;
 
 #ifdef TRACE
 	Error("Ora_Rollback");
 #endif
@@ -532,24 +487,19 @@ Ora_Rollback() /* conn_index */
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	conn->waserror = 0;
 
 	Push("0", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_Rollback end");
 #endif
 }
-
+#endif
 
 void
 Ora_Parse(int flag) /* cursor_index, sql_statement [, defer] */
 {
 #if HAVE_LIBOCIC
 	Stack *s;
 	oraCursor *cursor;
@@ -638,22 +588,23 @@ Ora_Parse(int flag) /* cursor_index, sql
 	Push("-1", LNUMBER);
 #endif
 #ifdef TRACE
 	Error("Ora_Parse end");
 #endif
 }
 
+#if HAVE_LIBOCIC
+
 /* Returns the number of SELECT-list items for a select, number of
 ** affected rows for UPDATE/INSERT/DELETE, 0 for another successful
 ** statement or -1 on error.
 */
 void
 Ora_Exec() /* cursor_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	oraCursor *cursor;
 	oraConnection *conn;
 	int cursor_ind, ncol;
 	ub2 sqlfunc;
 	char retval[16];
 	char *t;
@@ -714,29 +665,23 @@ Ora_Exec() /* cursor_index */
 	}
 
 	ora_bind_out(cursor);
 	conn->waserror = 0;
 
 	sprintf(retval, "%d", ncol);
 	Push(retval, LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_Exec end");
 #endif
 }
 
 
 void
 Ora_Fetch() /* cursor_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	int cursor_ind;
 	oraCursor *cursor;
 	sword err;
 
 #ifdef TRACE
 	Error("Ora_Fetch");
@@ -769,29 +714,23 @@ Ora_Fetch() /* cursor_index */
 		Push("-1", LNUMBER);
 		return;
 	}
 
 	cursor->curr_column = cursor->column_top;
 
 	Push("1", LNUMBER);
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_Fetch end");
 #endif
 }
 
 
 void
 Ora_GetColumn() /* cursor_index, column_index */
 {
-#if HAVE_LIBOCIC
 	Stack *s;
 	int cursor_ind, column_ind;
 	oraCursor *cursor;
 	oraColumn *column;
 	sb2 type;
 
 #ifdef TRACE
@@ -904,29 +843,23 @@ Ora_GetColumn() /* cursor_index, column_
 	}
 	else {
 		Error("Ora_GetColumn found invalid type (%d) in column %d", type,
 			  column_ind);
 		Push("-1", LNUMBER);
 		return;
 	}
-#else
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 #ifdef TRACE
 	Error("Ora_GetColumn end");
 #endif
 }
 
 
 void
 Ora_Bind(void) /* cursor_index, php_var_name, sql_var_name, var_len */
 {
-#if HAVE_LIBOCIC
 	Stack        *s;
 	oraCursor    *cursor;
 	VarTree      *php_var;
 	int          cursor_ind;
 	char         *php_var_name;
 	char         *sql_var_name;
 	int          var_type;
@@ -1018,42 +951,33 @@ Ora_Bind(void) /* cursor_index, php_var_
 
 	if ( ! ora_new_bind(cursor, php_var_name, sql_var_name, 
 						VARCHAR2_TYPE, var_len)) {
         Push("-1", LNUMBER);
 	}           
 
 	Push("0", LNUMBER); /* Bind successfully */
-#else
-	Pop();
-	Pop();
-	Pop();
-	Pop();
-	Error("no Oracle support");
-	Push("-1", LNUMBER);
-#endif
 }
 
 
 
 /* Called when page is done */
 void
 OraCloseAll(void)
 {
-#if HAVE_LIBOCIC
 	int i;
 	oraConnection *conn;
       
 	for (i = 0; i < MAX_CONNECTIONS; i++) {
 		conn = ora_conn_array + i;
 		if (conn->ind >= 0 && conn->inuse != 0) {
 			do_logoff(ora_conn_array+i);
 		}
 	}
-#endif
 }
+#endif
 
 #if HAVE_LIBOCIC
 
 /* Called at beginning of page. */
 void
 php_init_oracle(void)
 {
--- a/src/php.h
+++ b/src/php.h
@@ -1300,14 +1300,15 @@ void GetImageSize(void);
 /* snmp.c */
 void phpsnmpget(void);
 void phpsnmpwalk(void);
 void phpsnmp(int);
 #endif
 
 /* oracle.c */
+#ifdef HAVE_LIBOCIC
 void Ora_Close(void);
 void Ora_Commit(void);
 void Ora_CommitOff(void);
 void Ora_CommitOn(void);
 void Ora_Exec(void);
 void Ora_Fetch(void);
 void Ora_GetColumn(void);
@@ -1315,14 +1316,18 @@ void Ora_Logoff(void);
 void Ora_Logon(void);
 void Ora_Open(void);
 void Ora_Parse(int);
 void Ora_Rollback(void);
 void Ora_Bind(void);
 void php_init_oracle(void);
 void OraCloseAll(void);
+#else
+#define php_init_oracle()
+#define OraCloseAll()
+#endif
 
 /* filepro.c */
 void filePro(void);
 void filePro_rowcount(void);
 void filePro_fieldcount(void);
 void filePro_fieldtype(void);
 void filePro_fieldname(void);
