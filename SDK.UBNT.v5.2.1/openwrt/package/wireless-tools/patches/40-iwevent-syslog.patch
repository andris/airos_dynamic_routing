--- a/iwevent.c
+++ b/iwevent.c
@@ -21,6 +21,8 @@
 
 #include <linux/netlink.h>
 #include <linux/rtnetlink.h>
+#include <syslog.h>
+#include <stdarg.h>
 
 #include <getopt.h>
 #include <time.h>
@@ -56,6 +58,36 @@ typedef struct wireless_iface
 /* Cache of wireless interfaces */
 struct wireless_iface *	interface_cache = NULL;
 
+/******************** PRINTF/SYSLOG HELPERS ************************/
+/* output to syslog */
+static int use_syslog = 0;
+
+static void
+init_log(void)
+{
+	if (use_syslog)
+		openlog("wireless", LOG_NDELAY, LOG_DAEMON);
+}
+
+static void
+close_log(void)
+{
+	if (use_syslog)
+		closelog();
+}
+
+static void
+do_log(const char* fmt, ...)
+{
+	va_list ap;
+	va_start(ap, fmt);
+	if (use_syslog)
+		vsyslog(LOG_INFO, fmt, ap);
+	else
+		vprintf(fmt, ap);
+	va_end(ap);
+}
+
 /************************ RTNETLINK HELPERS ************************/
 /*
  * The following code is extracted from :
@@ -295,13 +327,15 @@ iw_hexdump(char *		buf,
  * Print one element from the scanning results
  */
 static inline int
-print_event_token(struct iw_event *	event,		/* Extracted token */
+print_event_token(const char* log_prefix,
+		  struct iw_event *	event,		/* Extracted token */
 		  struct iw_range *	iw_range,	/* Range info */
 		  int			has_range)
 {
   char		buffer[128];	/* Temporary buffer */
   char		buffer2[30];	/* Temporary buffer */
   char *	prefix = (IW_IS_GET(event->cmd) ? "New" : "Set");
+  const char *	lprefix = log_prefix ? log_prefix : "";
 
   /* Now, let's decode the event */
   switch(event->cmd)
@@ -310,9 +344,9 @@ print_event_token(struct iw_event *	even
       /* Events that result from a "SET XXX" operation by the user */
     case SIOCSIWNWID:
       if(event->u.nwid.disabled)
-	printf("Set NWID:off/any\n");
+	do_log("%sSet NWID:off/any\n", lprefix);
       else
-	printf("Set NWID:%X\n", event->u.nwid.value);
+	do_log("%sSet NWID:%X\n", lprefix, event->u.nwid.value);
       break;
     case SIOCSIWFREQ:
     case SIOCGIWFREQ:
@@ -331,11 +365,11 @@ print_event_token(struct iw_event *	even
 	  }
 	iw_print_freq(buffer, sizeof(buffer),
 		      freq, channel, event->u.freq.flags);
-	printf("%s %s\n", prefix, buffer);
+	do_log("%s%s %s\n", lprefix, prefix, buffer);
       }
       break;
     case SIOCSIWMODE:
-      printf("Set Mode:%s\n",
+      do_log("%sSet Mode:%s\n", lprefix,
 	     iw_operation_mode[event->u.mode]);
       break;
     case SIOCSIWESSID:
@@ -349,13 +383,13 @@ print_event_token(struct iw_event *	even
 	  {
 	    /* Does it have an ESSID index ? */
 	    if((event->u.essid.flags & IW_ENCODE_INDEX) > 1)
-	      printf("%s ESSID:\"%s\" [%d]\n", prefix, essid,
+	      do_log("%s%s ESSID:\"%s\" [%d]\n", lprefix, prefix, essid,
 		     (event->u.essid.flags & IW_ENCODE_INDEX));
 	    else
-	      printf("%s ESSID:\"%s\"\n", prefix, essid);
+	      do_log("%s%s ESSID:\"%s\"\n", lprefix, prefix, essid);
 	  }
 	else
-	  printf("%s ESSID:off/any\n", prefix);
+	  do_log("%s%s ESSID:off/any\n", lprefix, prefix);
       }
       break;
     case SIOCSIWENCODE:
@@ -365,38 +399,28 @@ print_event_token(struct iw_event *	even
 	  memcpy(key, event->u.data.pointer, event->u.data.length);
 	else
 	  event->u.data.flags |= IW_ENCODE_NOKEY;
-	printf("Set Encryption key:");
 	if(event->u.data.flags & IW_ENCODE_DISABLED)
-	  printf("off\n");
+	  do_log("%sSet Encryption key:off\n", lprefix);
 	else
 	  {
-	    /* Display the key */
-	    iw_print_key(buffer, sizeof(buffer), key, event->u.data.length,
-			 event->u.data.flags);
-	    printf("%s", buffer);
-
-	    /* Other info... */
 	    if((event->u.data.flags & IW_ENCODE_INDEX) > 1)
-	      printf(" [%d]", event->u.data.flags & IW_ENCODE_INDEX);
-	    if(event->u.data.flags & IW_ENCODE_RESTRICTED)
-	      printf("   Security mode:restricted");
-	    if(event->u.data.flags & IW_ENCODE_OPEN)
-	      printf("   Security mode:open");
-	    printf("\n");
+	  	  do_log("%sSet Encryption key:[%d]\n", lprefix, event->u.data.flags & IW_ENCODE_INDEX);
+		else
+	  	  do_log("%sSet Encryption key.\n", lprefix);
 	  }
       }
       break;
       /* ----- driver events ----- */
       /* Events generated by the driver when something important happens */
     case SIOCGIWAP:
-      printf("New Access Point/Cell address:%s\n",
+      do_log("%sNew Access Point/Cell address:%s\n", lprefix,
 	     iw_sawap_ntop(&event->u.ap_addr, buffer));
       break;
     case SIOCGIWSCAN:
-      printf("Scan request completed\n");
+      do_log("%sScan request completed\n", lprefix);
       break;
     case IWEVTXDROP:
-      printf("Tx packet dropped:%s\n",
+      do_log("%sTx packet dropped:%s\n", lprefix,
 	     iw_saether_ntop(&event->u.addr, buffer));
       break;
     case IWEVCUSTOM:
@@ -405,15 +429,15 @@ print_event_token(struct iw_event *	even
 	memset(custom, '\0', sizeof(custom));
 	if((event->u.data.pointer) && (event->u.data.length))
 	  memcpy(custom, event->u.data.pointer, event->u.data.length);
-	printf("Custom driver event:%s\n", custom);
+	do_log("%s%s\n", lprefix, custom);
       }
       break;
     case IWEVREGISTERED:
-      printf("Registered node:%s\n",
+      do_log("%sRegistered node:%s\n", lprefix,
 	     iw_saether_ntop(&event->u.addr, buffer));
       break;
     case IWEVEXPIRED:
-      printf("Expired node:%s\n",
+      do_log("%sExpired node:%s\n", lprefix,
 	     iw_saether_ntop(&event->u.addr, buffer));
       break;
     case SIOCGIWTHRSPY:
@@ -423,14 +447,14 @@ print_event_token(struct iw_event *	even
 	  {
 	    memcpy(&threshold, event->u.data.pointer,
 		   sizeof(struct iw_thrspy));
-	    printf("Spy threshold crossed on address:%s\n",
+	    do_log("%sSpy threshold crossed on address:%s\n", lprefix,
 		   iw_saether_ntop(&threshold.addr, buffer));
 	    iw_print_stats(buffer, sizeof(buffer),
 			   &threshold.qual, iw_range, has_range);
-	    printf("                            Link %s\n", buffer);
+	    do_log("                            Link %s\n", buffer);
 	  }
 	else
-	  printf("Invalid Spy Threshold event\n");
+	  do_log("%sInvalid Spy Threshold event\n", lprefix);
       }
       break;
       /* ----- driver WPA events ----- */
@@ -440,20 +464,20 @@ print_event_token(struct iw_event *	even
 	{
 	  struct iw_michaelmicfailure mf;
 	  memcpy(&mf, event->u.data.pointer, sizeof(mf));
-	  printf("Michael MIC failure flags:0x%X src_addr:%s tsc:%s\n",
-		 mf.flags,
+	  do_log("%sMichael MIC failure flags:0x%X src_addr:%s tsc:%s\n",
+		 lprefix, mf.flags,
 		 iw_saether_ntop(&mf.src_addr, buffer2),
 		 iw_hexdump(buffer, sizeof(buffer),
 			    mf.tsc, IW_ENCODE_SEQ_MAX_SIZE));
 	}
       break;
     case IWEVASSOCREQIE:
-      printf("Association Request IEs:%s\n",
+      do_log("%sAssociation Request IEs:%s\n", lprefix,
 	     iw_hexdump(buffer, sizeof(buffer),
 			event->u.data.pointer, event->u.data.length));
       break;
     case IWEVASSOCRESPIE:
-      printf("Association Response IEs:%s\n",
+      do_log("%sAssociation Response IEs:%s\n", lprefix,
 	     iw_hexdump(buffer, sizeof(buffer),
 			event->u.data.pointer, event->u.data.length));
       break;
@@ -462,7 +486,7 @@ print_event_token(struct iw_event *	even
 	{
 	  struct iw_pmkid_cand cand;
 	  memcpy(&cand, event->u.data.pointer, sizeof(cand));
-	  printf("PMKID candidate flags:0x%X index:%d bssid:%s\n",
+	  do_log("%sPMKID candidate flags:0x%X index:%d bssid:%s\n", lprefix,
 		 cand.flags, cand.index,
 		 iw_saether_ntop(&cand.bssid, buffer));
 	}
@@ -471,21 +495,21 @@ print_event_token(struct iw_event *	even
       /* other junk not currently in use */
     case SIOCGIWRATE:
       iw_print_bitrate(buffer, sizeof(buffer), event->u.bitrate.value);
-      printf("New Bit Rate:%s\n", buffer);
+      do_log("%sNew Bit Rate:%s\n", lprefix, buffer);
       break;
     case SIOCGIWNAME:
-      printf("Protocol:%-1.16s\n", event->u.name);
+      do_log("%sProtocol:%-1.16s\n", lprefix, event->u.name);
       break;
     case IWEVQUAL:
       {
 	event->u.qual.updated = 0x0;	/* Not that reliable, disable */
 	iw_print_stats(buffer, sizeof(buffer),
 		       &event->u.qual, iw_range, has_range);
-	printf("Link %s\n", buffer);
+	do_log("%sLink %s\n", lprefix, buffer);
 	break;
       }
     default:
-      printf("(Unknown Wireless event 0x%04X)\n", event->cmd);
+      do_log("%s(Unknown Wireless event 0x%04X)\n", lprefix, event->cmd);
     }	/* switch(event->cmd) */
 
   return(0);
@@ -518,6 +542,7 @@ print_event_stream(int		ifindex,
 
   /* Print received time in readable form */
   gettimeofday(&recv_time, &tz);
+  if (!use_syslog)
   iw_print_timeval(buffer, sizeof(buffer), &recv_time, &tz);
 
   iw_init_event_stream(&stream, data, len);
@@ -528,17 +553,21 @@ print_event_stream(int		ifindex,
 				    wireless_data->range.we_version_compiled);
       if(ret != 0)
 	{
-	  if(i++ == 0)
-	    printf("%s   %-8.16s ", buffer, wireless_data->ifname);
+	  char prefix[64];
+	  if (use_syslog)
+		  snprintf(prefix, sizeof(prefix),
+				  "%-8.16s ", wireless_data->ifname);
 	  else
-	    printf("                           ");
+		  snprintf(prefix, sizeof(prefix),
+				"%s   %-8.16s ", buffer, wireless_data->ifname);
 	  if(ret > 0)
-	    print_event_token(&iwe,
+	    print_event_token(prefix, &iwe,
 			      &wireless_data->range, wireless_data->has_range);
 	  else
-	    printf("(Invalid event)\n");
+	    do_log("%s(Invalid event)\n", prefix);
 	  /* Push data out *now*, in case we are redirected to a pipe */
-	  fflush(stdout);
+	  if (!use_syslog)
+		  fflush(stdout);
 	}
     }
   while(ret > 0);
@@ -739,6 +768,7 @@ iw_usage(int status)
 	"   Monitors and displays Wireless Events.\n"
 	"   Options are:\n"
 	"     -h,--help     Print this message.\n"
+	"     -s,--syslog   Print output to syslog.\n"
 	"     -v,--version  Show version of this program.\n",
 	status ? stderr : stdout);
   exit(status);
@@ -747,6 +777,7 @@ iw_usage(int status)
 static const struct option long_opts[] = {
   { "help", no_argument, NULL, 'h' },
   { "version", no_argument, NULL, 'v' },
+  { "syslog", no_argument, NULL, 's' },
   { NULL, 0, NULL, 0 }
 };
 
@@ -762,7 +793,7 @@ main(int	argc,
   int opt;
 
   /* Check command line options */
-  while((opt = getopt_long(argc, argv, "hv", long_opts, NULL)) > 0)
+  while((opt = getopt_long(argc, argv, "hvs", long_opts, NULL)) > 0)
     {
       switch(opt)
 	{
@@ -774,6 +805,11 @@ main(int	argc,
 	  return(iw_print_version_info("iwevent"));
 	  break;
 
+	case 's':
+	  use_syslog = 1;
+	  break;
+
+
 	default:
 	  iw_usage(1);
 	  break;
@@ -792,13 +828,16 @@ main(int	argc,
       return(1);
     }
 
-  fprintf(stderr, "Waiting for Wireless Events from interfaces...\n");
+  init_log();
+  if (!use_syslog)
+  	fprintf(stderr, "Waiting for Wireless Events from interfaces...\n");
 
   /* Do what we have to do */
   wait_for_event(&rth);
 
   /* Cleanup - only if you are pedantic */
   rtnl_close(&rth);
+  close_log();
 
   return(0);
 }
