--- a/src/drivers/driver_wext.c
+++ b/src/drivers/driver_wext.c
@@ -173,6 +173,7 @@ struct wpa_driver_wext_data {
 
 	char mlmedev[IFNAMSIZ + 1];
 
+	unsigned int num_channels;
 	int scan_complete_events;
 };
 
@@ -1214,14 +1215,22 @@ int wpa_driver_wext_scan(void *priv, con
 
 	/* Not all drivers generate "scan completed" wireless event, so try to
 	 * read results after a timeout. */
-	timeout = 5;
+	 /**
+	  * if we have a channel count - we assume to stay 200ms on channel,
+	  * and add 1 second "bonus" time
+	  **/
+	if (drv->num_channels)
+		timeout = drv->num_channels * 2 / 10 + 1;
+	if (timeout < 10)
+		timeout = 10;
 	if (drv->scan_complete_events) {
 		/*
 		 * The driver seems to deliver SIOCGIWSCAN events to notify
 		 * when scan is complete, so use longer timeout to avoid race
 		 * conditions with scanning and following association request.
 		 */
-		timeout = 30;
+		if (timeout < 30)
+			timeout = 30;
 	}
 	wpa_printf(MSG_DEBUG, "Scan requested (ret=%d) - scan timeout %d "
 		   "seconds", ret, timeout);
@@ -1705,6 +1714,8 @@ static int wpa_driver_wext_get_range(voi
 			drv->capa.enc |= WPA_DRIVER_CAPA_ENC_CCMP;
 		wpa_printf(MSG_DEBUG, "  capabilities: key_mgmt 0x%x enc 0x%x",
 			   drv->capa.key_mgmt, drv->capa.enc);
+		drv->num_channels = range->num_channels;
+		wpa_printf(MSG_DEBUG, "  has %d available channels", drv->num_channels);
 	} else {
 		wpa_printf(MSG_DEBUG, "SIOCGIWRANGE: too old (short) data - "
 			   "assuming WPA is not supported");
