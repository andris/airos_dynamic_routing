#!/bin/sh

#
# Load the settings
#
. /etc/airview.conf

AIRVIEW_SHUTDOWN_MARKER=/tmp/airview_shutdown

#
# Prefixed output
#
output() {
	if [ "${AIRVIEW_USE_LOGGER}" -eq 1 ]; then
		echo "airview[$$]: $@" | logger ${AIRVIEW_LOGGER_ARGS}
	elif [ "${AIRVIEW_USE_CONSOLE}" -eq 1 ]; then
		echo "airview[$$]: $@" >/dev/console
	else
		echo "airview[$$]: $@"
	fi;
}
#
# Debugging output
#
debug() {
	if [ -n "${DEBUG_AIRVIEW_SCRIPT}" ] && [ "${DEBUG_AIRVIEW_SCRIPT}" -eq 1 ]; then
		output "$@"
	fi;
}
#
# Command tracing
#
trace() {
	debug "$@"
	$@
	return $?
}

#
# Allow for override of this script during debugging
#
if [ ! "$(realpath ${0})" = "/var/etc/persistent/airview" ] && [ -e "/var/etc/persistent/airview" ]; then
	debug "Delegating to debug version of airview"
	trace /var/etc/persistent/airview $@
	exit $?
fi;

#
# Validate settings
#
if [ ! -e /etc/airview.conf ]; then
	debug "AirView is not enabled/configured.\n" 
	exit 1;
fi;

cleanup() {
	trace rm -f "${AIRVIEW_SHUTDOWN_MARKER}"
	trace rm -rf /tmp/airview
	trace rmmod ubnt_spectral 1>/dev/null 2>/dev/null
	trace garp
}

setup() {
	# cleanup old marker file if present
	trace cleanup
	#
	# Disable daemons
	#
	trace sed -r -e "s~^(null::respawn:.*pa_supplicant)~#\1~g;s~^(null::respawn:.*ostapd)~#\1~g;s~^(null::respawn:.*wdog)~#\1~g;s~^(null::respawn:.*wevent)~#\1~g" -i /etc/inittab
	trace init -q
	trace killall -q wpa_supplicant hostapd iwevent pwdog
	sleep 1
	trace killall -q -INT wpa_supplicant hostapd iwevent pwdog
	#
	# Disable bridge enslavement
	#
	BRIDGE_PORT_PREFIX="$(cat /tmp/system.cfg | sed -n -r -e "/bridge.*${VAP}/ { s/.devname.*//g;p }")"
	BRIDGE_PREFIX="$(echo ${BRIDGE_PORT_PREFIX} | sed -n -r -e "s/.port.*//g;p")"
	BRIDGE_DEV="$(cat /tmp/system.cfg | grep ${BRIDGE_PREFIX}.devname | sed -r -e "s/.*=//g")"
	BRIDGE_STATUS="$(cat /tmp/system.cfg | sed -n -r -e "/bridge.status=/ { s/bridge.status=//g;p }")"
	if [ "${BRIDGE_STATUS}" = "enabled" ]; then
		if brctl show | grep -q ${VAP}; then 
			trace brctl delif ${BRIDGE_DEV} ${VAP}
			trace garp
		fi;
	fi
	#
	# Fix country code (attempt #1 - for non-frequency-shifted products)
	# probability of having some crazy exception from polling module, etc.. 
	# is reduced by changing the country early if possible.
	#
	CURRENT_COUNTRY="$(iwpriv ${RADIO} getCountry | sed -r -e "s/.*getCountry:(..).*/\1/g")"
	if [ "${CURRENT_COUNTRY}" != "DB" ] && [ "${CURRENT_COUNTRY}" != "UB" ]; then 
		trace iwpriv ${RADIO} setCountry UB
	fi;
	#
	# Fix clock
	#
	CURRENT_CLKSEL="$(iwpriv ${RADIO} GetClkSel | sed -r -e "s/.*GetClkSel:(.).*/\1/g")"
	if [ "${CURRENT_CLKSEL}" != "1" ]; then
		trace iwpriv ${RADIO} ClkSel 1
	fi
	#
	# Fix frequency shifting
	#
	CURRENT_SHIFT="$(iwpriv ${RADIO} GetFreqShift | sed -r -e "s/.*GetFreqShift:(.).*/\1/g")"
	if [ "${CURRENT_SHIFT}" != "${AIRVIEW_FREQUENCY_SHIFT}" ]; then
		trace iwpriv ${RADIO} FreqShift ${AIRVIEW_FREQUENCY_SHIFT}
	fi
	#
	# Load the module
	#
	lsmod | grep -q ubnt_spectral
	if [ $? -eq 1 ]; then
		trace insmod ubnt_spectral
	fi;
	#
	# Fix country code
	#
	# Always hit this again after inserting ubnt_spectral in case it opened up a larger set of channels
	trace iwpriv ${RADIO} setCountry UB
	return 0;
}

teardown() {
	#
	# Unload module
	#
	lsmod | grep -q ubnt_spectral
	if [ $? -eq 0 ]; then
		trace rmmod ubnt_spectral
	fi;
	#
	# Try to disable any special restrictions before restoring CC and clock to avoid errors
	#
	trace iwconfig ${VAP} channel auto
	#
	# Fix country code
	#
	CURRENT_COUNTRY="$(iwpriv ${RADIO} getCountry | sed -r -e "s/.*getCountry:(..).*/\1/g")"
	CFG_COUNTRY="$(cat /tmp/system.cfg | sed -n -r -e "/radio.countrycode/ { s/.*=//g;p }")"
	[ -n "${CFG_COUNTRY}" ] || CFG_COUNTRY="0"
	if [ "${CURRENT_COUNTRY}" != "${CFG_COUNTRY}" ]; then 
		trace iwpriv ${RADIO} setCountry ${CFG_COUNTRY}
	fi;
	#
	# Fix clock
	#
	CFG_CLKSEL="$(cat /tmp/system.cfg | sed -n -r -e "/radio.1.clksel/ { s/.*=//g;p }")"
	[ -n "${CFG_CLKSEL}" ] || CFG_CLKSEL=1
	CURRENT_CLKSEL="$(iwpriv ${RADIO} GetClkSel | sed -r -e "s/.*GetClkSel:(.).*/1/g")"
	if [ "${CURRENT_CLKSEL}" != "${CFG_CLKSEL}" ]; then
		trace iwpriv ${RADIO} ClkSel ${CFG_CLKSEL}
	fi
	#
	# Fix frequency shift
	#
	CFG_FREQSHIFT="$(cat /tmp/system.cfg | sed -n -r -e "/radio.1.chanshift/ { s/.*=//g;p }")"
	CURRENT_FREQSHIFT="$(iwpriv ${RADIO} GetFreqShift | sed -r -e "s/.*FreqShift:(.).*/1/g")"
	[ -n "${CFG_FREQSHIFT}" ] || CFG_FREQSHIFT=0
	if [ "${CURRENT_FREQSHIFT}" != "${CFG_FREQSHIFT}" ]; then
		trace iwpriv ${RADIO} FreqShift ${CFG_FREQSHIFT}
	fi
	#
	# Cleanup airview output files
	#
	trace rm -rf /tmp/airview
	# trace sed -r -e "s~^#(null::respawn:.*pa_supplicant)~\1~g;s~^#(null::respawn:.*ostapd)~\1~g;s~^#(null::respawn:.*wevent)~\1~g" -i /etc/inittab
	# trace init -q
	if [ -e "${AIRVIEW_SHUTDOWN_MARKER}" ] && [ "$(cat "${AIRVIEW_SHUTDOWN_MARKER}")" = "softrestart" ]; then
		debug "Stop was caused by softrestart.  Don't run it again."
	else
		debug "Initiating soft restart."
		trace . /usr/etc/rc.d/rc.softrestart 2>&1 | sed -r -e "s/^/    SOFTRESTART: /g"
		debug "Soft restart complete."
	fi;
	trace garp
	trace cleanup
	return 0;
}

stop() {
	# If no processes, skip the kill loop
	status
	if [ ! $? -eq 0 ]; then
		debug "Stop exits early...not running."
		trace cleanup
		return 0;
	fi;
	# set marker
	if [ -n "${1}" ]; then 
		echo -n "${1}" >"${AIRVIEW_SHUTDOWN_MARKER}"
	else
		echo -n "'airview stop' command" >"${AIRVIEW_SHUTDOWN_MARKER}"
	fi;
	#
	# Now keep sending USR1 signals until airview init script
	# finishes and gets out of the way.  But do not wait more than
	# thirty seconds.  It should be done long beore then.
	#
	COUNTDOWN=30
	while [ ${COUNTDOWN} -gt 0 ]; do
		# If we see airview or spectralserver, send more QUIT signals
		if ps | grep -q spectralserver; then
			trace killall -q -USR1 spectralserver
			COUNTDOWN="$((COUNTDOWN-1))"
			sleep 1;
		else
			# our work is done here...
			COUNTDOWN=0
		fi;
	done;
	#
	# Use the big hammer at the end, just in case...
	#
	trace killall -q -KILL spectralserver
	return 0;
}

start() {
	status 
	if [ $? -eq 0 ]; then
		if [ -e "${AIRVIEW_SHUTDOWN_MARKER}" ]; then
			debug "Airview shutdown in progress due to $(cat "${AIRVIEW_SHUTDOWN_MARKER}").  Not starting again."
		else
			debug "Airview already running.  Not starting again."
		fi;
	else
		trace airview service </dev/null &
	fi;
}

service() {
	trace setup
	# Restart server forever or until we get INT signal leading to return code 0 from the process
	local RET=42
	while 	[ ! -e "${AIRVIEW_SHUTDOWN_MARKER}" ]; do
		debug "AirView started as: spectralserver ${AIRVIEW_ARGS}"
		trace spectralserver ${AIRVIEW_ARGS} 
		RET=$?
		debug "AirView return code is ${RET}"
		if [ -e "${AIRVIEW_SHUTDOWN_MARKER}" ]; then
			debug "AirView is being shutdown due to $(cat "${AIRVIEW_SHUTDOWN_MARKER}")."
		elif [ ${RET} -eq 0 ]; then
			trace echo "inactivity" >"${AIRVIEW_SHUTDOWN_MARKER}"
			debug "AirView is being shutdown due to $(cat "${AIRVIEW_SHUTDOWN_MARKER}")."
		else
			debug "AirView crashed and will restart."
		fi;
	done;
	trace teardown
	return ${RET}
}

status() {
	FOUND="$(ps -w | grep "airview service" | grep -v grep)"
	if [ -n "${FOUND}" ]; then
		if [ -e "${AIRVIEW_SHUTDOWN_MARKER}" ]; then
			debug "Airview is shutting down due to $(cat "${AIRVIEW_SHUTDOWN_MARKER}")."
		else
			debug "AirView is running."
		fi;
		return 0
	else
		debug "AirView is not running."
		trace cleanup
		return 1
	fi;
}

do_cmd() {
	local CMD="${1}"
	local RET=0
	CMD_STR="$@"
	shift
	trace ${CMD} $@
	RET=$?
	debug "do_cmd '${CMD_STR}' returns ${RET}."
	return ${RET}
}

main() {
	# Invoke the command from first argument
	if [ -n "${1}" ]; then
		CMD="${1}"
		shift
		case "${CMD}" in
		stop)
			do_cmd "stop" "'airview stop' command"
			return $?
			;;
		web_start)
			do_cmd "start" "web"
			return $?
			;;
		start)
			do_cmd "${CMD}"
			return $?
			;;
		softrestart_stop)
			do_cmd "stop" "softrestart"
			return $?
			;;
		softrestart_start)
			# do_cmd "start" "softrestart"
			true
			return $?
			;;
		service)
			do_cmd "${CMD}"
			return $?
			;;
		status)
			do_cmd "${CMD}"
			return $?
			;;
		*)
			output "Unrecognized command: ${CMD}!"
			# Fallthrough
			;;
		esac
	fi;
	output "Usage: $(basename ${0}) <start|stop|status>"
	return 1
}

main $@
exit $?
