--- a/arch/mips/ar7240/gpio.c
+++ b/arch/mips/ar7240/gpio.c
@@ -609,6 +609,8 @@ int __init ar7240_simple_config_init(voi
  * thereby resulting in misc_register api to fail.
  * GPIO12 can either be used for I2S or simple config.
  */
+#if 0 /* ubnt: skip gpio configuration */
 #if !defined(CONFIG_I2S)
 late_initcall(ar7240_simple_config_init);
 #endif
+#endif
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -331,6 +331,10 @@ config ISTALLION
 	  To compile this driver as a module, choose M here: the
 	  module will be called istallion.
 
+config AR7240_GPIO
+	tristate "Atheros AR7240 GPIO device support"
+	depends on MIPS && MACH_AR7240
+
 config AU1X00_GPIO
 	tristate "Alchemy Au1000 GPIO device support"
 	depends on MIPS && SOC_AU1X00
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -79,6 +79,7 @@ obj-$(CONFIG_HW_RANDOM) += hw_random.o
 obj-$(CONFIG_FTAPE) += ftape/
 obj-$(CONFIG_COBALT_LCD) += lcd.o
 obj-$(CONFIG_ITE_GPIO) += ite_gpio.o
+obj-$(CONFIG_AR7240_GPIO) += ar7240_gpio.o
 obj-$(CONFIG_AU1000_GPIO) += au1000_gpio.o
 obj-$(CONFIG_AU1000_USB_TTY) += au1000_usbtty.o
 obj-$(CONFIG_AU1000_USB_RAW) += au1000_usbraw.o
--- /dev/null
+++ b/drivers/char/ar7240_gpio.c
@@ -0,0 +1,414 @@
+#ifndef AUTOCONF_INCLUDED
+#include <linux/config.h>
+#endif
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/proc_fs.h>
+#include <linux/init.h>
+#include <asm/gdb-stub.h>
+#include <linux/interrupt.h>
+
+#include "ar7240.h"
+
+#ifndef CONFIG_PROC_FS
+#error This module requires PROCFS
+#endif
+
+#define GPIO_CHAR_DEV
+
+#ifdef GPIO_CHAR_DEV
+#include <asm/uaccess.h>
+#include <linux/miscdevice.h>
+
+#if 1 /* XXX */
+#ifndef GPIO_H_
+#define GPIO_H_
+
+struct gpio_bit {
+	unsigned char bit;
+	unsigned char state;
+};
+
+#define GPIO_MAJOR    127
+#define GPIO_GET_BIT	0x0000001
+#define GPIO_SET_BIT	0x0000002
+#define GPIO_GET_CONFIG	0x0000003
+#define GPIO_SET_CONFIG 0x0000004
+#define GPIO_SET_LEDS   0x0000005
+#define GPIO_GET_FUNC   0x0000006
+#define GPIO_SET_FUNC   0x0000007
+
+#define GPIO_DIR_INPUT	0
+#define GPIO_DIR_OUTPUT	1
+
+#define GPIO_DATA_LO	0
+#define GPIO_DATA_HI	1
+
+void gpio_line_get(unsigned char line, u32 * data);
+unsigned int gpio_line_set(unsigned char line, u32 val);
+unsigned int gpio_line_config(unsigned char line, unsigned char state);
+
+#endif /*GPIO_H_*/
+#else
+#include "gpio.h"
+#endif
+
+#define DEVICE_NAME "gpio"
+
+static unsigned char gpio_status;        /* bitmapped status byte.       */
+#endif /* GPIO_CHAR_DEV */
+
+#define MODULE_VERS "1.0"
+#define MODULE_NAME "ar7240-gpio"
+
+#define GP_PROC_NAME "gpio"
+#define GP_RESET_BTN "reset_btn"
+#define GP_SYS_LED "system_led"
+
+#define RESETBTN_GPIO 12
+#define LED1_OFFSET 0
+#define LED2_OFFSET 1
+#define LED3_OFFSET 11
+#define LED4_OFFSET 7
+
+static u32 gpio_leds_set(u8* leds)
+{
+	ar7240_reg_t reg_dir;
+	ar7240_reg_t reg_out;
+	u8 c, n, d, o, i;
+
+	if (!leds || !(c = leds[0]))
+	{
+		return 0;
+	}
+
+	reg_dir = ar7240_reg_rd(AR7240_GPIO_OE);
+	reg_out = ar7240_reg_rd(AR7240_GPIO_OUT);
+
+#ifdef DEBUG
+	printk("COUNT: %d\n", (int)c);
+	printk("AR7240_GPIO_OE: %x\n", AR7240_GPIO_OE);
+	printk("Read %x from AR7240_GPIO_OE\n", reg_dir);
+	printk("Read %x from AR7240_GPIO_OUT\n", reg_out);
+#endif
+
+	for (i = 1; i <= c; ++i)
+	{
+		n = leds[i] >> 2;
+		d = (leds[i] >> 1) & 1;
+		o = leds[i] & 1;
+#ifdef DEBUG
+		printk("GPIO_OE[%d] = %d, GPIO_OUT[%d] = %d (0x%02X)\n",
+				n, d, n, o, leds[i]);
+#endif
+		if (d) /* configure for OUTPUT */
+		{
+			reg_dir |= (1 << n);
+		}
+		else /* configure for INPUT */
+		{
+			reg_dir &= ~(1 << n);
+		}
+		if (o) /* write OUTPUT */
+		{
+			reg_out |= (1 << n);
+		}
+		else
+		{
+			reg_out &= ~(1 << n);
+		}
+	}
+#ifdef DEBUG
+	printk("Write %x to AR7240_GPIO_OE\n", reg_dir);
+#endif
+	ar7240_reg_wr_nf(AR7240_GPIO_OE, reg_dir);
+	reg_dir = ar7240_reg_rd(AR7240_GPIO_OE); /* flush */
+#ifdef DEBUG
+	printk("Read %x from AR7240_GPIO_OE\n", reg_dir);
+
+	printk("Write %x from AR7240_GPIO_OUT\n", reg_out);
+#endif
+	ar7240_reg_wr_nf(AR7240_GPIO_OUT, reg_out);
+	reg_out = ar7240_reg_rd(AR7240_GPIO_OUT); /* flush */
+#ifdef DEBUG
+	printk("Read %x from AR7240_GPIO_OUT\n", reg_out);
+#endif
+	return reg_out;
+}
+
+#ifdef GPIO_CHAR_DEV
+
+void gpio_line_get(unsigned char line, u32 * data)
+{
+	*data = (ar7240_reg_rd(AR7240_GPIO_IN) >> line) & 1;
+}
+EXPORT_SYMBOL(gpio_line_get);
+
+void gpio_func_get(u32 * data)
+{
+    *data = ar7240_reg_rd(AR7240_GPIO_FUNCTIONS);
+#ifdef DEBUG
+    printk("Read %x from AR7240_GPIO_FUNCTIONS\n",*data);
+#endif
+}
+EXPORT_SYMBOL(gpio_func_get);
+
+unsigned int gpio_line_set(unsigned char line, u32 val)
+{
+	ar7240_reg_t reg = ar7240_reg_rd(AR7240_GPIO_OUT);
+
+	reg &= ~(1 << line);
+	reg |= (val & 1) << line;
+	ar7240_reg_wr_nf(AR7240_GPIO_OUT, reg);
+	return ar7240_reg_rd(AR7240_GPIO_OUT);
+}
+EXPORT_SYMBOL(gpio_line_set);
+
+unsigned int gpio_func_set(u32 val)
+{
+#ifdef DEBUG
+	printk("Write %x to AR7240_GPIO_FUNCTIONS\n",val);
+#endif
+    ar7240_reg_wr_nf(AR7240_GPIO_FUNCTIONS, val);
+	return ar7240_reg_rd(AR7240_GPIO_FUNCTIONS);
+}
+EXPORT_SYMBOL(gpio_func_set);
+
+unsigned int gpio_line_config(unsigned char line, unsigned char state)
+{
+	ar7240_reg_t reg = ar7240_reg_rd(AR7240_GPIO_OE);
+
+	if (state) /* configure for OUTPUT */
+	{
+		ar7240_reg_wr_nf(AR7240_GPIO_OE, (reg | (1 << line)));
+	}
+	else /* configure for INPUT */
+	{
+		ar7240_reg_wr_nf(AR7240_GPIO_OE, (reg & ~(1 << line)));
+	}
+	return ar7240_reg_rd(AR7240_GPIO_OE); /* flush */
+}
+EXPORT_SYMBOL(gpio_line_config);
+
+static int gpio_ioctl(struct inode *inode, struct file *file, unsigned int cmd,
+	unsigned long arg)
+{
+	struct gpio_bit bit;
+	u32 val;
+	u8 leds[33];
+
+	if (cmd == GPIO_SET_LEDS)
+	{
+		u8 len;
+		if (copy_from_user(&len, (u8*)arg, sizeof(len)))
+		{
+			return -EFAULT;
+		}
+		if (copy_from_user(leds, (u8*)arg, len > 33 ? 33 : len + 1))
+		{
+			return -EFAULT;
+		}
+	}
+	else if (cmd == GPIO_SET_FUNC)
+	{
+		if (copy_from_user(&val, (u32*)arg, sizeof(val)))
+		{
+			return -EFAULT;
+		}
+	}
+	else
+	{
+		if (copy_from_user(&bit, (struct gpio_bit *)arg, sizeof(bit)))
+		{
+			return -EFAULT;
+		}
+	}
+
+	switch (cmd)
+	{
+		case GPIO_GET_BIT:
+			gpio_line_get(bit.bit, &val);
+			bit.state = val;
+			return copy_to_user((void *)arg, &bit, sizeof(bit)) ? -EFAULT : 0;
+		case GPIO_SET_BIT:
+			val = bit.state;
+			gpio_line_set(bit.bit, val);
+			return 0;
+		case GPIO_GET_CONFIG:
+			gpio_line_config(bit.bit, bit.state);
+			return copy_to_user((void *)arg, &bit, sizeof(bit)) ? -EFAULT : 0;
+		case GPIO_SET_CONFIG:
+			val = bit.state;
+			gpio_line_config(bit.bit, bit.state);
+			return 0;
+		case GPIO_SET_LEDS:
+			gpio_leds_set(leds);
+			return 0;
+		case GPIO_GET_FUNC:
+			gpio_func_get(&val);
+			return copy_to_user((void*)arg, &val, sizeof(val)) ? -EFAULT : 0;
+		case GPIO_SET_FUNC:
+			gpio_func_set(val);
+			return 0;
+	}
+	return -EINVAL;
+}
+
+static int gpio_open(struct inode *inode, struct file *file)
+{
+	/* XXX: increase use count? */
+	return 0;
+}
+
+static int gpio_release(struct inode *inode, struct file *file)
+{
+	/* XXX: decrease use count, if it was increase in open? */
+	return 0;
+}
+
+/*
+ *      The file operations we support.
+ */
+static struct file_operations gpio_fops =
+{
+	.owner          = THIS_MODULE,
+	.ioctl          = gpio_ioctl,
+	.open           = gpio_open,
+	.release        = gpio_release,
+};
+
+static struct miscdevice gpio_dev =
+{
+	.minor          = 0,
+	.name           = DEVICE_NAME,
+	.fops           = &gpio_fops,
+};
+#endif /* GPIO_CHAR_DEV */
+
+static int ar7240_reset_read(char *page, char **start, off_t off, int count,
+	int *eof, void *data)
+{
+	ar7240_reg_t gpioDataIn;
+
+	/* get button state */
+	gpioDataIn = (ar7240_reg_rd(AR7240_GPIO_IN) >> RESETBTN_GPIO) & 1;
+	return snprintf(page, count, "%d\n", gpioDataIn ? 1 : 0 );
+}
+
+static int ar7240_led_read(char *page, char **start, off_t off,  int count,
+	int *eof, void *data)
+{
+	return snprintf(page, count, "LEDS: %x %x\n",
+			ar7240_reg_rd(AR7240_GPIO_OE),
+			ar7240_reg_rd(AR7240_GPIO_OUT));
+}
+
+static int ar7240_led_write(struct file *file, const char *buf,
+	unsigned long count, void *data)
+{
+	int c;
+	int n = 0;
+	int result;
+	u32 nr, dir, out;
+	const char* p = buf;
+	u8 leds[33];
+
+	if (!p)
+	{
+		return -EIO;
+	}
+
+#ifdef DEBUG
+	printk("ARG: %s\n", buf);
+#endif
+	while (*p && leds[0] < 32)
+	{
+#ifdef DEBUG
+		printk("PARSE: _%s_\n", p);
+#endif
+		result = sscanf(p, "%u %u %u%n", &nr, &dir, &out, &c);
+		p += c;
+#ifdef DEBUG
+		printk("COUNT: %d [%u %u %u]\n", result, nr, dir, out);
+#endif
+		if ((result != 3) || (p - buf > count))
+		{
+			break;
+		}
+		++n;
+		leds[n] = (nr << 2) | (dir ? 2 : 0) | (out ? 1 : 0);
+	}
+	leds[0] = n;
+	gpio_leds_set(leds);
+	return count;
+}
+
+/* procfs */
+static struct proc_dir_entry *ar7240_gpio_entry = NULL;
+static struct proc_dir_entry *ar7240_reset_entry = NULL;
+static struct proc_dir_entry *ar7240_led_entry = NULL;
+
+int __init ar7240_gpio_setup(void)
+{
+#ifdef GPIO_CHAR_DEV
+	int retval;
+
+	/* register /dev/gpio file ops */
+	retval = register_chrdev(GPIO_MAJOR, DEVICE_NAME, &gpio_fops);
+	if(retval < 0)
+	{
+		return retval;
+	}
+#endif
+
+	/* register /proc/gpio */
+	ar7240_gpio_entry = proc_mkdir(GP_PROC_NAME, NULL);
+	if (!ar7240_gpio_entry)
+	{
+		printk("Failed to create /proc/%s\n", GP_PROC_NAME);
+		return -ENOENT;
+	}
+	ar7240_gpio_entry->owner = THIS_MODULE;
+
+	/* create /proc/gpio/reset_btn */
+	ar7240_reset_entry = create_proc_read_entry(GP_RESET_BTN, 0444,
+			ar7240_gpio_entry, ar7240_reset_read, NULL);
+	if (ar7240_reset_entry)
+	{
+		ar7240_reset_entry->owner = THIS_MODULE;
+	}
+
+	/* create /proc/gpio/system_led */
+	ar7240_led_entry = create_proc_entry(GP_SYS_LED, 0644, ar7240_gpio_entry);
+	if (ar7240_led_entry)
+	{
+		ar7240_led_entry->write_proc = ar7240_led_write;
+		ar7240_led_entry->read_proc = ar7240_led_read;
+		ar7240_led_entry->owner = THIS_MODULE;
+	}
+	printk(KERN_INFO "%s %s initialised\n", MODULE_NAME, MODULE_VERS);
+	return 0;
+}
+
+static void __exit ar7240_gpio_unload(void)
+{
+	remove_proc_entry(GP_SYS_LED, ar7240_gpio_entry);
+	remove_proc_entry(GP_RESET_BTN, ar7240_gpio_entry);
+	remove_proc_entry(GP_PROC_NAME, NULL);
+#ifdef GPIO_CHAR_DEV
+	unregister_chrdev(GPIO_MAJOR, DEVICE_NAME);
+#endif
+}
+
+module_init(ar7240_gpio_setup);
+module_exit(ar7240_gpio_unload);
+
+MODULE_AUTHOR("Ubiquiti");
+MODULE_DESCRIPTION("AR7240 GPIO control");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("GPL");
+#endif
+#undef GPIO_CHAR_DEV
